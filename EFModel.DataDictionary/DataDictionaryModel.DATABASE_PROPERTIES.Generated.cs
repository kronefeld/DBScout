//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Permanent database properties
    /// </summary>
    public partial class DATABASE_PROPERTIES : ICloneable, INotifyPropertyChanged    {

        public DATABASE_PROPERTIES()
        {
        }

        #region Properties
    
        /// <summary>
        /// Property name
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string PROPERTY_NAME
        {
            get
            {
                return _PROPERTY_NAME;
            }
            set
            {
                if (_PROPERTY_NAME != value)
                {
                    _PROPERTY_NAME = value;
                    OnPropertyChanged("PROPERTY_NAME");
                }
            }
        }
        private string _PROPERTY_NAME;

    
        /// <summary>
        /// Property value
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public virtual string PROPERTY_VALUE
        {
            get
            {
                return _PROPERTY_VALUE;
            }
            set
            {
                if (_PROPERTY_VALUE != value)
                {
                    _PROPERTY_VALUE = value;
                    OnPropertyChanged("PROPERTY_VALUE");
                }
            }
        }
        private string _PROPERTY_VALUE;

    
        /// <summary>
        /// Property description
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public virtual string DESCRIPTION
        {
            get
            {
                return _DESCRIPTION;
            }
            set
            {
                if (_DESCRIPTION != value)
                {
                    _DESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _DESCRIPTION;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DATABASE_PROPERTIES obj = new DATABASE_PROPERTIES();
            obj.PROPERTY_NAME = PROPERTY_NAME;
            obj.PROPERTY_VALUE = PROPERTY_VALUE;
            obj.DESCRIPTION = DESCRIPTION;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
