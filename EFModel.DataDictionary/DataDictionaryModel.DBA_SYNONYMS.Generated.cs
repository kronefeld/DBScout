//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// All synonyms in the database
    /// </summary>
    public partial class DBA_SYNONYMS : ICloneable, INotifyPropertyChanged    {

        public DBA_SYNONYMS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Username of the owner of the synonym
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the synonym
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string SYNONYM_NAME
        {
            get
            {
                return _SYNONYM_NAME;
            }
            set
            {
                if (_SYNONYM_NAME != value)
                {
                    _SYNONYM_NAME = value;
                    OnPropertyChanged("SYNONYM_NAME");
                }
            }
        }
        private string _SYNONYM_NAME;

    
        /// <summary>
        /// Owner of the object referenced by the synonym
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLE_OWNER
        {
            get
            {
                return _TABLE_OWNER;
            }
            set
            {
                if (_TABLE_OWNER != value)
                {
                    _TABLE_OWNER = value;
                    OnPropertyChanged("TABLE_OWNER");
                }
            }
        }
        private string _TABLE_OWNER;

    
        /// <summary>
        /// Name of the object referenced by the synonym
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLE_NAME
        {
            get
            {
                return _TABLE_NAME;
            }
            set
            {
                if (_TABLE_NAME != value)
                {
                    _TABLE_NAME = value;
                    OnPropertyChanged("TABLE_NAME");
                }
            }
        }
        private string _TABLE_NAME;

    
        /// <summary>
        /// Name of the database link referenced in a remote synonym
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public virtual string DB_LINK
        {
            get
            {
                return _DB_LINK;
            }
            set
            {
                if (_DB_LINK != value)
                {
                    _DB_LINK = value;
                    OnPropertyChanged("DB_LINK");
                }
            }
        }
        private string _DB_LINK;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_SYNONYMS obj = new DBA_SYNONYMS();
            obj.OWNER = OWNER;
            obj.SYNONYM_NAME = SYNONYM_NAME;
            obj.TABLE_OWNER = TABLE_OWNER;
            obj.TABLE_NAME = TABLE_NAME;
            obj.DB_LINK = DB_LINK;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
