//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description of all types in the database
    /// </summary>
    public partial class DBA_TYPES : ICloneable, INotifyPropertyChanged    {

        public DBA_TYPES()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the type
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the type
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TYPE_NAME
        {
            get
            {
                return _TYPE_NAME;
            }
            set
            {
                if (_TYPE_NAME != value)
                {
                    _TYPE_NAME = value;
                    OnPropertyChanged("TYPE_NAME");
                }
            }
        }
        private string _TYPE_NAME;

    
        /// <summary>
        /// Object identifier (OID) of the type
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual global::System.Guid TYPE_OID
        {
            get
            {
                return _TYPE_OID;
            }
            set
            {
                if (_TYPE_OID != value)
                {
                    _TYPE_OID = value;
                    OnPropertyChanged("TYPE_OID");
                }
            }
        }
        private global::System.Guid _TYPE_OID;

    
        /// <summary>
        /// Typecode of the type
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TYPECODE
        {
            get
            {
                return _TYPECODE;
            }
            set
            {
                if (_TYPECODE != value)
                {
                    _TYPECODE = value;
                    OnPropertyChanged("TYPECODE");
                }
            }
        }
        private string _TYPECODE;

    
        /// <summary>
        /// Number of attributes in the type
        /// </summary>
        public virtual global::System.Nullable<decimal> ATTRIBUTES
        {
            get
            {
                return _ATTRIBUTES;
            }
            set
            {
                if (_ATTRIBUTES != value)
                {
                    _ATTRIBUTES = value;
                    OnPropertyChanged("ATTRIBUTES");
                }
            }
        }
        private global::System.Nullable<decimal> _ATTRIBUTES;

    
        /// <summary>
        /// Number of methods in the type
        /// </summary>
        public virtual global::System.Nullable<decimal> METHODS
        {
            get
            {
                return _METHODS;
            }
            set
            {
                if (_METHODS != value)
                {
                    _METHODS = value;
                    OnPropertyChanged("METHODS");
                }
            }
        }
        private global::System.Nullable<decimal> _METHODS;

    
        /// <summary>
        /// Is the type a predefined type?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string PREDEFINED
        {
            get
            {
                return _PREDEFINED;
            }
            set
            {
                if (_PREDEFINED != value)
                {
                    _PREDEFINED = value;
                    OnPropertyChanged("PREDEFINED");
                }
            }
        }
        private string _PREDEFINED;

    
        /// <summary>
        /// Is the type an incomplete type?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string INCOMPLETE
        {
            get
            {
                return _INCOMPLETE;
            }
            set
            {
                if (_INCOMPLETE != value)
                {
                    _INCOMPLETE = value;
                    OnPropertyChanged("INCOMPLETE");
                }
            }
        }
        private string _INCOMPLETE;

    
        /// <summary>
        /// Is the type a final type?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string FINAL
        {
            get
            {
                return _FINAL;
            }
            set
            {
                if (_FINAL != value)
                {
                    _FINAL = value;
                    OnPropertyChanged("FINAL");
                }
            }
        }
        private string _FINAL;

    
        /// <summary>
        /// Is the type an instantiable type?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string INSTANTIABLE
        {
            get
            {
                return _INSTANTIABLE;
            }
            set
            {
                if (_INSTANTIABLE != value)
                {
                    _INSTANTIABLE = value;
                    OnPropertyChanged("INSTANTIABLE");
                }
            }
        }
        private string _INSTANTIABLE;

    
        /// <summary>
        /// Owner of the supertype (null if type is not a subtype)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string SUPERTYPE_OWNER
        {
            get
            {
                return _SUPERTYPE_OWNER;
            }
            set
            {
                if (_SUPERTYPE_OWNER != value)
                {
                    _SUPERTYPE_OWNER = value;
                    OnPropertyChanged("SUPERTYPE_OWNER");
                }
            }
        }
        private string _SUPERTYPE_OWNER;

    
        /// <summary>
        /// Name of the supertype (null if type is not a subtype)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string SUPERTYPE_NAME
        {
            get
            {
                return _SUPERTYPE_NAME;
            }
            set
            {
                if (_SUPERTYPE_NAME != value)
                {
                    _SUPERTYPE_NAME = value;
                    OnPropertyChanged("SUPERTYPE_NAME");
                }
            }
        }
        private string _SUPERTYPE_NAME;

    
        /// <summary>
        /// Number of local (not inherited) attributes (if any) in the subtype
        /// </summary>
        public virtual global::System.Nullable<decimal> LOCAL_ATTRIBUTES
        {
            get
            {
                return _LOCAL_ATTRIBUTES;
            }
            set
            {
                if (_LOCAL_ATTRIBUTES != value)
                {
                    _LOCAL_ATTRIBUTES = value;
                    OnPropertyChanged("LOCAL_ATTRIBUTES");
                }
            }
        }
        private global::System.Nullable<decimal> _LOCAL_ATTRIBUTES;

    
        /// <summary>
        /// Number of local (not inherited) methods (if any) in the subtype
        /// </summary>
        public virtual global::System.Nullable<decimal> LOCAL_METHODS
        {
            get
            {
                return _LOCAL_METHODS;
            }
            set
            {
                if (_LOCAL_METHODS != value)
                {
                    _LOCAL_METHODS = value;
                    OnPropertyChanged("LOCAL_METHODS");
                }
            }
        }
        private global::System.Nullable<decimal> _LOCAL_METHODS;

    
        /// <summary>
        /// Type id value of the type
        /// </summary>
        public virtual global::System.Nullable<System.Guid> TYPEID
        {
            get
            {
                return _TYPEID;
            }
            set
            {
                if (_TYPEID != value)
                {
                    _TYPEID = value;
                    OnPropertyChanged("TYPEID");
                }
            }
        }
        private global::System.Nullable<System.Guid> _TYPEID;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_TYPES obj = new DBA_TYPES();
            obj.OWNER = OWNER;
            obj.TYPE_NAME = TYPE_NAME;
            obj.TYPE_OID = TYPE_OID;
            obj.TYPECODE = TYPECODE;
            obj.ATTRIBUTES = ATTRIBUTES;
            obj.METHODS = METHODS;
            obj.PREDEFINED = PREDEFINED;
            obj.INCOMPLETE = INCOMPLETE;
            obj.FINAL = FINAL;
            obj.INSTANTIABLE = INSTANTIABLE;
            obj.SUPERTYPE_OWNER = SUPERTYPE_OWNER;
            obj.SUPERTYPE_NAME = SUPERTYPE_NAME;
            obj.LOCAL_ATTRIBUTES = LOCAL_ATTRIBUTES;
            obj.LOCAL_METHODS = LOCAL_METHODS;
            obj.TYPEID = TYPEID;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
