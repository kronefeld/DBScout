//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// All materialized views in the database
    /// </summary>
    public partial class DBA_MVIEWS : ICloneable, INotifyPropertyChanged    {

        public DBA_MVIEWS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the materialized view
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the materialized view
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string MVIEW_NAME
        {
            get
            {
                return _MVIEW_NAME;
            }
            set
            {
                if (_MVIEW_NAME != value)
                {
                    _MVIEW_NAME = value;
                    OnPropertyChanged("MVIEW_NAME");
                }
            }
        }
        private string _MVIEW_NAME;

    
        /// <summary>
        /// Name of the materialized view container table
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string CONTAINER_NAME
        {
            get
            {
                return _CONTAINER_NAME;
            }
            set
            {
                if (_CONTAINER_NAME != value)
                {
                    _CONTAINER_NAME = value;
                    OnPropertyChanged("CONTAINER_NAME");
                }
            }
        }
        private string _CONTAINER_NAME;

    
        /// <summary>
        /// The defining query that the materialized view instantiates
        /// </summary>
        public virtual string QUERY
        {
            get
            {
                return _QUERY;
            }
            set
            {
                if (_QUERY != value)
                {
                    _QUERY = value;
                    OnPropertyChanged("QUERY");
                }
            }
        }
        private string _QUERY;

    
        /// <summary>
        /// The number of bytes in the defining query (based on the server character set
        /// </summary>
        public virtual global::System.Nullable<decimal> QUERY_LEN
        {
            get
            {
                return _QUERY_LEN;
            }
            set
            {
                if (_QUERY_LEN != value)
                {
                    _QUERY_LEN = value;
                    OnPropertyChanged("QUERY_LEN");
                }
            }
        }
        private global::System.Nullable<decimal> _QUERY_LEN;

    
        /// <summary>
        /// Indicates whether the materialized view can be updated
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UPDATABLE
        {
            get
            {
                return _UPDATABLE;
            }
            set
            {
                if (_UPDATABLE != value)
                {
                    _UPDATABLE = value;
                    OnPropertyChanged("UPDATABLE");
                }
            }
        }
        private string _UPDATABLE;

    
        /// <summary>
        /// Name of the table that logs changes to an updatable materialized view
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string UPDATE_LOG
        {
            get
            {
                return _UPDATE_LOG;
            }
            set
            {
                if (_UPDATE_LOG != value)
                {
                    _UPDATE_LOG = value;
                    OnPropertyChanged("UPDATE_LOG");
                }
            }
        }
        private string _UPDATE_LOG;

    
        /// <summary>
        /// Name of the rollback segment to use at the master site
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string MASTER_ROLLBACK_SEG
        {
            get
            {
                return _MASTER_ROLLBACK_SEG;
            }
            set
            {
                if (_MASTER_ROLLBACK_SEG != value)
                {
                    _MASTER_ROLLBACK_SEG = value;
                    OnPropertyChanged("MASTER_ROLLBACK_SEG");
                }
            }
        }
        private string _MASTER_ROLLBACK_SEG;

    
        /// <summary>
        /// Name of the database link to the master site
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public virtual string MASTER_LINK
        {
            get
            {
                return _MASTER_LINK;
            }
            set
            {
                if (_MASTER_LINK != value)
                {
                    _MASTER_LINK = value;
                    OnPropertyChanged("MASTER_LINK");
                }
            }
        }
        private string _MASTER_LINK;

    
        /// <summary>
        /// Indicates whether rewrite is enabled for the materialized view
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string REWRITE_ENABLED
        {
            get
            {
                return _REWRITE_ENABLED;
            }
            set
            {
                if (_REWRITE_ENABLED != value)
                {
                    _REWRITE_ENABLED = value;
                    OnPropertyChanged("REWRITE_ENABLED");
                }
            }
        }
        private string _REWRITE_ENABLED;

    
        /// <summary>
        /// Indicates the kind of rewrite that is enabled
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public virtual string REWRITE_CAPABILITY
        {
            get
            {
                return _REWRITE_CAPABILITY;
            }
            set
            {
                if (_REWRITE_CAPABILITY != value)
                {
                    _REWRITE_CAPABILITY = value;
                    OnPropertyChanged("REWRITE_CAPABILITY");
                }
            }
        }
        private string _REWRITE_CAPABILITY;

    
        /// <summary>
        /// Indicates how and when the materialized view will be refreshed
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public virtual string REFRESH_MODE
        {
            get
            {
                return _REFRESH_MODE;
            }
            set
            {
                if (_REFRESH_MODE != value)
                {
                    _REFRESH_MODE = value;
                    OnPropertyChanged("REFRESH_MODE");
                }
            }
        }
        private string _REFRESH_MODE;

    
        /// <summary>
        /// The default refresh method for the materialized view (complete, fast, ...)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string REFRESH_METHOD
        {
            get
            {
                return _REFRESH_METHOD;
            }
            set
            {
                if (_REFRESH_METHOD != value)
                {
                    _REFRESH_METHOD = value;
                    OnPropertyChanged("REFRESH_METHOD");
                }
            }
        }
        private string _REFRESH_METHOD;

    
        /// <summary>
        /// How and when to initially build (load) the materialized view container
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public virtual string BUILD_MODE
        {
            get
            {
                return _BUILD_MODE;
            }
            set
            {
                if (_BUILD_MODE != value)
                {
                    _BUILD_MODE = value;
                    OnPropertyChanged("BUILD_MODE");
                }
            }
        }
        private string _BUILD_MODE;

    
        /// <summary>
        /// Indicates the kinds of operations that can be fast refreshed for the MV
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public virtual string FAST_REFRESHABLE
        {
            get
            {
                return _FAST_REFRESHABLE;
            }
            set
            {
                if (_FAST_REFRESHABLE != value)
                {
                    _FAST_REFRESHABLE = value;
                    OnPropertyChanged("FAST_REFRESHABLE");
                }
            }
        }
        private string _FAST_REFRESHABLE;

    
        /// <summary>
        /// Indicates the kind of refresh that was last performed on the MV
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string LAST_REFRESH_TYPE
        {
            get
            {
                return _LAST_REFRESH_TYPE;
            }
            set
            {
                if (_LAST_REFRESH_TYPE != value)
                {
                    _LAST_REFRESH_TYPE = value;
                    OnPropertyChanged("LAST_REFRESH_TYPE");
                }
            }
        }
        private string _LAST_REFRESH_TYPE;

    
        /// <summary>
        /// The date that the materialized view was last refreshed
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> LAST_REFRESH_DATE
        {
            get
            {
                return _LAST_REFRESH_DATE;
            }
            set
            {
                if (_LAST_REFRESH_DATE != value)
                {
                    _LAST_REFRESH_DATE = value;
                    OnPropertyChanged("LAST_REFRESH_DATE");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _LAST_REFRESH_DATE;

    
        /// <summary>
        /// Indicates the staleness state of the materialized view (fresh, stale, ...)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public virtual string STALENESS
        {
            get
            {
                return _STALENESS;
            }
            set
            {
                if (_STALENESS != value)
                {
                    _STALENESS = value;
                    OnPropertyChanged("STALENESS");
                }
            }
        }
        private string _STALENESS;

    
        /// <summary>
        /// Indicates the staleness state the MV will have after a fast refresh is done
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public virtual string AFTER_FAST_REFRESH
        {
            get
            {
                return _AFTER_FAST_REFRESH;
            }
            set
            {
                if (_AFTER_FAST_REFRESH != value)
                {
                    _AFTER_FAST_REFRESH = value;
                    OnPropertyChanged("AFTER_FAST_REFRESH");
                }
            }
        }
        private string _AFTER_FAST_REFRESH;

    
        /// <summary>
        /// Indicates if the materialized view is prebuilt
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UNKNOWN_PREBUILT
        {
            get
            {
                return _UNKNOWN_PREBUILT;
            }
            set
            {
                if (_UNKNOWN_PREBUILT != value)
                {
                    _UNKNOWN_PREBUILT = value;
                    OnPropertyChanged("UNKNOWN_PREBUILT");
                }
            }
        }
        private string _UNKNOWN_PREBUILT;

    
        /// <summary>
        /// Indicates if the materialized view contains PL/SQL function
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UNKNOWN_PLSQL_FUNC
        {
            get
            {
                return _UNKNOWN_PLSQL_FUNC;
            }
            set
            {
                if (_UNKNOWN_PLSQL_FUNC != value)
                {
                    _UNKNOWN_PLSQL_FUNC = value;
                    OnPropertyChanged("UNKNOWN_PLSQL_FUNC");
                }
            }
        }
        private string _UNKNOWN_PLSQL_FUNC;

    
        /// <summary>
        /// Indicates if the materialized view contains external tables
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UNKNOWN_EXTERNAL_TABLE
        {
            get
            {
                return _UNKNOWN_EXTERNAL_TABLE;
            }
            set
            {
                if (_UNKNOWN_EXTERNAL_TABLE != value)
                {
                    _UNKNOWN_EXTERNAL_TABLE = value;
                    OnPropertyChanged("UNKNOWN_EXTERNAL_TABLE");
                }
            }
        }
        private string _UNKNOWN_EXTERNAL_TABLE;

    
        /// <summary>
        /// Indicates if the materialized view is considered fresh
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UNKNOWN_CONSIDER_FRESH
        {
            get
            {
                return _UNKNOWN_CONSIDER_FRESH;
            }
            set
            {
                if (_UNKNOWN_CONSIDER_FRESH != value)
                {
                    _UNKNOWN_CONSIDER_FRESH = value;
                    OnPropertyChanged("UNKNOWN_CONSIDER_FRESH");
                }
            }
        }
        private string _UNKNOWN_CONSIDER_FRESH;

    
        /// <summary>
        /// Indicates if the materialized view is imported
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UNKNOWN_IMPORT
        {
            get
            {
                return _UNKNOWN_IMPORT;
            }
            set
            {
                if (_UNKNOWN_IMPORT != value)
                {
                    _UNKNOWN_IMPORT = value;
                    OnPropertyChanged("UNKNOWN_IMPORT");
                }
            }
        }
        private string _UNKNOWN_IMPORT;

    
        /// <summary>
        /// Indicates if the materialized view used trusted constraints for refresh
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string UNKNOWN_TRUSTED_FD
        {
            get
            {
                return _UNKNOWN_TRUSTED_FD;
            }
            set
            {
                if (_UNKNOWN_TRUSTED_FD != value)
                {
                    _UNKNOWN_TRUSTED_FD = value;
                    OnPropertyChanged("UNKNOWN_TRUSTED_FD");
                }
            }
        }
        private string _UNKNOWN_TRUSTED_FD;

    
        /// <summary>
        /// Indicates the validity of the MV meta-data
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public virtual string COMPILE_STATE
        {
            get
            {
                return _COMPILE_STATE;
            }
            set
            {
                if (_COMPILE_STATE != value)
                {
                    _COMPILE_STATE = value;
                    OnPropertyChanged("COMPILE_STATE");
                }
            }
        }
        private string _COMPILE_STATE;

    
        /// <summary>
        /// Indicates whether the MV uses no index
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string USE_NO_INDEX
        {
            get
            {
                return _USE_NO_INDEX;
            }
            set
            {
                if (_USE_NO_INDEX != value)
                {
                    _USE_NO_INDEX = value;
                    OnPropertyChanged("USE_NO_INDEX");
                }
            }
        }
        private string _USE_NO_INDEX;

    
        /// <summary>
        /// Time from when the materialized view became stale
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> STALE_SINCE
        {
            get
            {
                return _STALE_SINCE;
            }
            set
            {
                if (_STALE_SINCE != value)
                {
                    _STALE_SINCE = value;
                    OnPropertyChanged("STALE_SINCE");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _STALE_SINCE;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_MVIEWS obj = new DBA_MVIEWS();
            obj.OWNER = OWNER;
            obj.MVIEW_NAME = MVIEW_NAME;
            obj.CONTAINER_NAME = CONTAINER_NAME;
            obj.QUERY = QUERY;
            obj.QUERY_LEN = QUERY_LEN;
            obj.UPDATABLE = UPDATABLE;
            obj.UPDATE_LOG = UPDATE_LOG;
            obj.MASTER_ROLLBACK_SEG = MASTER_ROLLBACK_SEG;
            obj.MASTER_LINK = MASTER_LINK;
            obj.REWRITE_ENABLED = REWRITE_ENABLED;
            obj.REWRITE_CAPABILITY = REWRITE_CAPABILITY;
            obj.REFRESH_MODE = REFRESH_MODE;
            obj.REFRESH_METHOD = REFRESH_METHOD;
            obj.BUILD_MODE = BUILD_MODE;
            obj.FAST_REFRESHABLE = FAST_REFRESHABLE;
            obj.LAST_REFRESH_TYPE = LAST_REFRESH_TYPE;
            obj.LAST_REFRESH_DATE = LAST_REFRESH_DATE;
            obj.STALENESS = STALENESS;
            obj.AFTER_FAST_REFRESH = AFTER_FAST_REFRESH;
            obj.UNKNOWN_PREBUILT = UNKNOWN_PREBUILT;
            obj.UNKNOWN_PLSQL_FUNC = UNKNOWN_PLSQL_FUNC;
            obj.UNKNOWN_EXTERNAL_TABLE = UNKNOWN_EXTERNAL_TABLE;
            obj.UNKNOWN_CONSIDER_FRESH = UNKNOWN_CONSIDER_FRESH;
            obj.UNKNOWN_IMPORT = UNKNOWN_IMPORT;
            obj.UNKNOWN_TRUSTED_FD = UNKNOWN_TRUSTED_FD;
            obj.COMPILE_STATE = COMPILE_STATE;
            obj.USE_NO_INDEX = USE_NO_INDEX;
            obj.STALE_SINCE = STALE_SINCE;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
