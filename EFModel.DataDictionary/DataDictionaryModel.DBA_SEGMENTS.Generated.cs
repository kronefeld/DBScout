//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Storage allocated for all database segments
    /// </summary>
    public partial class DBA_SEGMENTS : ICloneable, INotifyPropertyChanged    {

        public DBA_SEGMENTS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Username of the segment owner
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name, if any, of the segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(81)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string SEGMENT_NAME
        {
            get
            {
                return _SEGMENT_NAME;
            }
            set
            {
                if (_SEGMENT_NAME != value)
                {
                    _SEGMENT_NAME = value;
                    OnPropertyChanged("SEGMENT_NAME");
                }
            }
        }
        private string _SEGMENT_NAME;

    
        /// <summary>
        /// Partition/Subpartition Name, if any, of the segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string PARTITION_NAME
        {
            get
            {
                return _PARTITION_NAME;
            }
            set
            {
                if (_PARTITION_NAME != value)
                {
                    _PARTITION_NAME = value;
                    OnPropertyChanged("PARTITION_NAME");
                }
            }
        }
        private string _PARTITION_NAME;

    
        /// <summary>
        /// Type of segment:  "TABLE", "CLUSTER", "INDEX", "ROLLBACK",
        /// "DEFERRED ROLLBACK", "TEMPORARY","SPACE HEADER", "TYPE2 UNDO"
        ///  or "CACHE"
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public virtual string SEGMENT_TYPE
        {
            get
            {
                return _SEGMENT_TYPE;
            }
            set
            {
                if (_SEGMENT_TYPE != value)
                {
                    _SEGMENT_TYPE = value;
                    OnPropertyChanged("SEGMENT_TYPE");
                }
            }
        }
        private string _SEGMENT_TYPE;

    
        /// <summary>
        /// Name of the tablespace containing the segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLESPACE_NAME
        {
            get
            {
                return _TABLESPACE_NAME;
            }
            set
            {
                if (_TABLESPACE_NAME != value)
                {
                    _TABLESPACE_NAME = value;
                    OnPropertyChanged("TABLESPACE_NAME");
                }
            }
        }
        private string _TABLESPACE_NAME;

    
        /// <summary>
        /// ID of the file containing the segment header
        /// </summary>
        public virtual global::System.Nullable<decimal> HEADER_FILE
        {
            get
            {
                return _HEADER_FILE;
            }
            set
            {
                if (_HEADER_FILE != value)
                {
                    _HEADER_FILE = value;
                    OnPropertyChanged("HEADER_FILE");
                }
            }
        }
        private global::System.Nullable<decimal> _HEADER_FILE;

    
        /// <summary>
        /// ID of the block containing the segment header
        /// </summary>
        public virtual global::System.Nullable<decimal> HEADER_BLOCK
        {
            get
            {
                return _HEADER_BLOCK;
            }
            set
            {
                if (_HEADER_BLOCK != value)
                {
                    _HEADER_BLOCK = value;
                    OnPropertyChanged("HEADER_BLOCK");
                }
            }
        }
        private global::System.Nullable<decimal> _HEADER_BLOCK;

    
        /// <summary>
        /// Size, in bytes, of the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> BYTES
        {
            get
            {
                return _BYTES;
            }
            set
            {
                if (_BYTES != value)
                {
                    _BYTES = value;
                    OnPropertyChanged("BYTES");
                }
            }
        }
        private global::System.Nullable<decimal> _BYTES;

    
        /// <summary>
        /// Size, in Oracle blocks, of the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> BLOCKS
        {
            get
            {
                return _BLOCKS;
            }
            set
            {
                if (_BLOCKS != value)
                {
                    _BLOCKS = value;
                    OnPropertyChanged("BLOCKS");
                }
            }
        }
        private global::System.Nullable<decimal> _BLOCKS;

    
        /// <summary>
        /// Number of extents allocated to the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> EXTENTS
        {
            get
            {
                return _EXTENTS;
            }
            set
            {
                if (_EXTENTS != value)
                {
                    _EXTENTS = value;
                    OnPropertyChanged("EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _EXTENTS;

    
        /// <summary>
        /// Size, in bytes, of the initial extent of the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> INITIAL_EXTENT
        {
            get
            {
                return _INITIAL_EXTENT;
            }
            set
            {
                if (_INITIAL_EXTENT != value)
                {
                    _INITIAL_EXTENT = value;
                    OnPropertyChanged("INITIAL_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _INITIAL_EXTENT;

    
        /// <summary>
        /// Size, in bytes, of the next extent to be allocated to the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> NEXT_EXTENT
        {
            get
            {
                return _NEXT_EXTENT;
            }
            set
            {
                if (_NEXT_EXTENT != value)
                {
                    _NEXT_EXTENT = value;
                    OnPropertyChanged("NEXT_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _NEXT_EXTENT;

    
        /// <summary>
        /// Minimum number of extents allowed in the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> MIN_EXTENTS
        {
            get
            {
                return _MIN_EXTENTS;
            }
            set
            {
                if (_MIN_EXTENTS != value)
                {
                    _MIN_EXTENTS = value;
                    OnPropertyChanged("MIN_EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _MIN_EXTENTS;

    
        /// <summary>
        /// Maximum number of extents allowed in the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> MAX_EXTENTS
        {
            get
            {
                return _MAX_EXTENTS;
            }
            set
            {
                if (_MAX_EXTENTS != value)
                {
                    _MAX_EXTENTS = value;
                    OnPropertyChanged("MAX_EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _MAX_EXTENTS;

    
        /// <summary>
        /// Percent by which to increase the size of the next extent to be allocated
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_INCREASE
        {
            get
            {
                return _PCT_INCREASE;
            }
            set
            {
                if (_PCT_INCREASE != value)
                {
                    _PCT_INCREASE = value;
                    OnPropertyChanged("PCT_INCREASE");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_INCREASE;

    
        /// <summary>
        /// Number of process freelists allocated in this segment
        /// </summary>
        public virtual global::System.Nullable<decimal> FREELISTS
        {
            get
            {
                return _FREELISTS;
            }
            set
            {
                if (_FREELISTS != value)
                {
                    _FREELISTS = value;
                    OnPropertyChanged("FREELISTS");
                }
            }
        }
        private global::System.Nullable<decimal> _FREELISTS;

    
        /// <summary>
        /// Number of freelist groups allocated in this segment
        /// </summary>
        public virtual global::System.Nullable<decimal> FREELIST_GROUPS
        {
            get
            {
                return _FREELIST_GROUPS;
            }
            set
            {
                if (_FREELIST_GROUPS != value)
                {
                    _FREELIST_GROUPS = value;
                    OnPropertyChanged("FREELIST_GROUPS");
                }
            }
        }
        private global::System.Nullable<decimal> _FREELIST_GROUPS;

    
        /// <summary>
        /// Relative number of the file containing the segment header
        /// </summary>
        public virtual global::System.Nullable<decimal> RELATIVE_FNO
        {
            get
            {
                return _RELATIVE_FNO;
            }
            set
            {
                if (_RELATIVE_FNO != value)
                {
                    _RELATIVE_FNO = value;
                    OnPropertyChanged("RELATIVE_FNO");
                }
            }
        }
        private global::System.Nullable<decimal> _RELATIVE_FNO;

    
        /// <summary>
        /// The default buffer pool to be used for segments blocks
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public virtual string BUFFER_POOL
        {
            get
            {
                return _BUFFER_POOL;
            }
            set
            {
                if (_BUFFER_POOL != value)
                {
                    _BUFFER_POOL = value;
                    OnPropertyChanged("BUFFER_POOL");
                }
            }
        }
        private string _BUFFER_POOL;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_SEGMENTS obj = new DBA_SEGMENTS();
            obj.OWNER = OWNER;
            obj.SEGMENT_NAME = SEGMENT_NAME;
            obj.PARTITION_NAME = PARTITION_NAME;
            obj.SEGMENT_TYPE = SEGMENT_TYPE;
            obj.TABLESPACE_NAME = TABLESPACE_NAME;
            obj.HEADER_FILE = HEADER_FILE;
            obj.HEADER_BLOCK = HEADER_BLOCK;
            obj.BYTES = BYTES;
            obj.BLOCKS = BLOCKS;
            obj.EXTENTS = EXTENTS;
            obj.INITIAL_EXTENT = INITIAL_EXTENT;
            obj.NEXT_EXTENT = NEXT_EXTENT;
            obj.MIN_EXTENTS = MIN_EXTENTS;
            obj.MAX_EXTENTS = MAX_EXTENTS;
            obj.PCT_INCREASE = PCT_INCREASE;
            obj.FREELISTS = FREELISTS;
            obj.FREELIST_GROUPS = FREELIST_GROUPS;
            obj.RELATIVE_FNO = RELATIVE_FNO;
            obj.BUFFER_POOL = BUFFER_POOL;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
