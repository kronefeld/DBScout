//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Columns of user's tables, views and clusters
    /// </summary>
    public partial class DBA_TAB_COLUMNS : ICloneable, INotifyPropertyChanged    {

        public DBA_TAB_COLUMNS()
        {
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for OWNER in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Table, view or cluster name
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLE_NAME
        {
            get
            {
                return _TABLE_NAME;
            }
            set
            {
                if (_TABLE_NAME != value)
                {
                    _TABLE_NAME = value;
                    OnPropertyChanged("TABLE_NAME");
                }
            }
        }
        private string _TABLE_NAME;

    
        /// <summary>
        /// Column name
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string COLUMN_NAME
        {
            get
            {
                return _COLUMN_NAME;
            }
            set
            {
                if (_COLUMN_NAME != value)
                {
                    _COLUMN_NAME = value;
                    OnPropertyChanged("COLUMN_NAME");
                }
            }
        }
        private string _COLUMN_NAME;

    
        /// <summary>
        /// Datatype of the column
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(106)]
        public virtual string DATA_TYPE
        {
            get
            {
                return _DATA_TYPE;
            }
            set
            {
                if (_DATA_TYPE != value)
                {
                    _DATA_TYPE = value;
                    OnPropertyChanged("DATA_TYPE");
                }
            }
        }
        private string _DATA_TYPE;

    
        /// <summary>
        /// Datatype modifier of the column
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string DATA_TYPE_MOD
        {
            get
            {
                return _DATA_TYPE_MOD;
            }
            set
            {
                if (_DATA_TYPE_MOD != value)
                {
                    _DATA_TYPE_MOD = value;
                    OnPropertyChanged("DATA_TYPE_MOD");
                }
            }
        }
        private string _DATA_TYPE_MOD;

    
        /// <summary>
        /// Owner of the datatype of the column
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string DATA_TYPE_OWNER
        {
            get
            {
                return _DATA_TYPE_OWNER;
            }
            set
            {
                if (_DATA_TYPE_OWNER != value)
                {
                    _DATA_TYPE_OWNER = value;
                    OnPropertyChanged("DATA_TYPE_OWNER");
                }
            }
        }
        private string _DATA_TYPE_OWNER;

    
        /// <summary>
        /// Length of the column in bytes
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal DATA_LENGTH
        {
            get
            {
                return _DATA_LENGTH;
            }
            set
            {
                if (_DATA_LENGTH != value)
                {
                    _DATA_LENGTH = value;
                    OnPropertyChanged("DATA_LENGTH");
                }
            }
        }
        private decimal _DATA_LENGTH;

    
        /// <summary>
        /// Length: decimal digits (NUMBER) or binary digits (FLOAT)
        /// </summary>
        public virtual global::System.Nullable<decimal> DATA_PRECISION
        {
            get
            {
                return _DATA_PRECISION;
            }
            set
            {
                if (_DATA_PRECISION != value)
                {
                    _DATA_PRECISION = value;
                    OnPropertyChanged("DATA_PRECISION");
                }
            }
        }
        private global::System.Nullable<decimal> _DATA_PRECISION;

    
        /// <summary>
        /// Digits to right of decimal point in a number
        /// </summary>
        public virtual global::System.Nullable<decimal> DATA_SCALE
        {
            get
            {
                return _DATA_SCALE;
            }
            set
            {
                if (_DATA_SCALE != value)
                {
                    _DATA_SCALE = value;
                    OnPropertyChanged("DATA_SCALE");
                }
            }
        }
        private global::System.Nullable<decimal> _DATA_SCALE;

    
        /// <summary>
        /// Does column allow NULL values?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string NULLABLE
        {
            get
            {
                return _NULLABLE;
            }
            set
            {
                if (_NULLABLE != value)
                {
                    _NULLABLE = value;
                    OnPropertyChanged("NULLABLE");
                }
            }
        }
        private string _NULLABLE;

    
        /// <summary>
        /// Sequence number of the column as created
        /// </summary>
        public virtual global::System.Nullable<decimal> COLUMN_ID
        {
            get
            {
                return _COLUMN_ID;
            }
            set
            {
                if (_COLUMN_ID != value)
                {
                    _COLUMN_ID = value;
                    OnPropertyChanged("COLUMN_ID");
                }
            }
        }
        private global::System.Nullable<decimal> _COLUMN_ID;

    
        /// <summary>
        /// Length of default value for the column
        /// </summary>
        public virtual global::System.Nullable<decimal> DEFAULT_LENGTH
        {
            get
            {
                return _DEFAULT_LENGTH;
            }
            set
            {
                if (_DEFAULT_LENGTH != value)
                {
                    _DEFAULT_LENGTH = value;
                    OnPropertyChanged("DEFAULT_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _DEFAULT_LENGTH;

    
        /// <summary>
        /// Default value for the column
        /// </summary>
        public virtual string DATA_DEFAULT
        {
            get
            {
                return _DATA_DEFAULT;
            }
            set
            {
                if (_DATA_DEFAULT != value)
                {
                    _DATA_DEFAULT = value;
                    OnPropertyChanged("DATA_DEFAULT");
                }
            }
        }
        private string _DATA_DEFAULT;

    
        /// <summary>
        /// The number of distinct values in the column
        /// </summary>
        public virtual global::System.Nullable<decimal> NUM_DISTINCT
        {
            get
            {
                return _NUM_DISTINCT;
            }
            set
            {
                if (_NUM_DISTINCT != value)
                {
                    _NUM_DISTINCT = value;
                    OnPropertyChanged("NUM_DISTINCT");
                }
            }
        }
        private global::System.Nullable<decimal> _NUM_DISTINCT;

    
        /// <summary>
        /// The low value in the column
        /// </summary>
        public virtual byte[] LOW_VALUE
        {
            get
            {
                return _LOW_VALUE;
            }
            set
            {
                if (!StructuralComparisons.StructuralEqualityComparer.Equals(_LOW_VALUE, value))
                {
                    _LOW_VALUE = value;
                    OnPropertyChanged("LOW_VALUE");
                }
            }
        }
        private byte[] _LOW_VALUE;

    
        /// <summary>
        /// The high value in the column
        /// </summary>
        public virtual byte[] HIGH_VALUE
        {
            get
            {
                return _HIGH_VALUE;
            }
            set
            {
                if (!StructuralComparisons.StructuralEqualityComparer.Equals(_HIGH_VALUE, value))
                {
                    _HIGH_VALUE = value;
                    OnPropertyChanged("HIGH_VALUE");
                }
            }
        }
        private byte[] _HIGH_VALUE;

    
        /// <summary>
        /// The density of the column
        /// </summary>
        public virtual global::System.Nullable<decimal> DENSITY
        {
            get
            {
                return _DENSITY;
            }
            set
            {
                if (_DENSITY != value)
                {
                    _DENSITY = value;
                    OnPropertyChanged("DENSITY");
                }
            }
        }
        private global::System.Nullable<decimal> _DENSITY;

    
        /// <summary>
        /// The number of nulls in the column
        /// </summary>
        public virtual global::System.Nullable<decimal> NUM_NULLS
        {
            get
            {
                return _NUM_NULLS;
            }
            set
            {
                if (_NUM_NULLS != value)
                {
                    _NUM_NULLS = value;
                    OnPropertyChanged("NUM_NULLS");
                }
            }
        }
        private global::System.Nullable<decimal> _NUM_NULLS;

    
        /// <summary>
        /// The number of buckets in histogram for the column
        /// </summary>
        public virtual global::System.Nullable<decimal> NUM_BUCKETS
        {
            get
            {
                return _NUM_BUCKETS;
            }
            set
            {
                if (_NUM_BUCKETS != value)
                {
                    _NUM_BUCKETS = value;
                    OnPropertyChanged("NUM_BUCKETS");
                }
            }
        }
        private global::System.Nullable<decimal> _NUM_BUCKETS;

    
        /// <summary>
        /// The date of the most recent time this column was analyzed
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> LAST_ANALYZED
        {
            get
            {
                return _LAST_ANALYZED;
            }
            set
            {
                if (_LAST_ANALYZED != value)
                {
                    _LAST_ANALYZED = value;
                    OnPropertyChanged("LAST_ANALYZED");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _LAST_ANALYZED;

    
        /// <summary>
        /// The sample size used in analyzing this column
        /// </summary>
        public virtual global::System.Nullable<decimal> SAMPLE_SIZE
        {
            get
            {
                return _SAMPLE_SIZE;
            }
            set
            {
                if (_SAMPLE_SIZE != value)
                {
                    _SAMPLE_SIZE = value;
                    OnPropertyChanged("SAMPLE_SIZE");
                }
            }
        }
        private global::System.Nullable<decimal> _SAMPLE_SIZE;

    
        /// <summary>
        /// Character set name
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(44)]
        public virtual string CHARACTER_SET_NAME
        {
            get
            {
                return _CHARACTER_SET_NAME;
            }
            set
            {
                if (_CHARACTER_SET_NAME != value)
                {
                    _CHARACTER_SET_NAME = value;
                    OnPropertyChanged("CHARACTER_SET_NAME");
                }
            }
        }
        private string _CHARACTER_SET_NAME;

    
        /// <summary>
        /// Declaration length of character type column
        /// </summary>
        public virtual global::System.Nullable<decimal> CHAR_COL_DECL_LENGTH
        {
            get
            {
                return _CHAR_COL_DECL_LENGTH;
            }
            set
            {
                if (_CHAR_COL_DECL_LENGTH != value)
                {
                    _CHAR_COL_DECL_LENGTH = value;
                    OnPropertyChanged("CHAR_COL_DECL_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _CHAR_COL_DECL_LENGTH;

    
        /// <summary>
        /// Are the statistics calculated without merging underlying partitions?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string GLOBAL_STATS
        {
            get
            {
                return _GLOBAL_STATS;
            }
            set
            {
                if (_GLOBAL_STATS != value)
                {
                    _GLOBAL_STATS = value;
                    OnPropertyChanged("GLOBAL_STATS");
                }
            }
        }
        private string _GLOBAL_STATS;

    
        /// <summary>
        /// Were the statistics entered directly by the user?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string USER_STATS
        {
            get
            {
                return _USER_STATS;
            }
            set
            {
                if (_USER_STATS != value)
                {
                    _USER_STATS = value;
                    OnPropertyChanged("USER_STATS");
                }
            }
        }
        private string _USER_STATS;

    
        /// <summary>
        /// The average length of the column in bytes
        /// </summary>
        public virtual global::System.Nullable<decimal> AVG_COL_LEN
        {
            get
            {
                return _AVG_COL_LEN;
            }
            set
            {
                if (_AVG_COL_LEN != value)
                {
                    _AVG_COL_LEN = value;
                    OnPropertyChanged("AVG_COL_LEN");
                }
            }
        }
        private global::System.Nullable<decimal> _AVG_COL_LEN;

    
        /// <summary>
        /// The maximum length of the column in characters
        /// </summary>
        public virtual global::System.Nullable<decimal> CHAR_LENGTH
        {
            get
            {
                return _CHAR_LENGTH;
            }
            set
            {
                if (_CHAR_LENGTH != value)
                {
                    _CHAR_LENGTH = value;
                    OnPropertyChanged("CHAR_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _CHAR_LENGTH;

    
        /// <summary>
        /// C if the width was specified in characters, B if in bytes
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string CHAR_USED
        {
            get
            {
                return _CHAR_USED;
            }
            set
            {
                if (_CHAR_USED != value)
                {
                    _CHAR_USED = value;
                    OnPropertyChanged("CHAR_USED");
                }
            }
        }
        private string _CHAR_USED;

    
        /// <summary>
        /// Is column data in 8.0 image format?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string V80_FMT_IMAGE
        {
            get
            {
                return _V80_FMT_IMAGE;
            }
            set
            {
                if (_V80_FMT_IMAGE != value)
                {
                    _V80_FMT_IMAGE = value;
                    OnPropertyChanged("V80_FMT_IMAGE");
                }
            }
        }
        private string _V80_FMT_IMAGE;

    
        /// <summary>
        /// Has column data been upgraded to the latest type version format?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string DATA_UPGRADED
        {
            get
            {
                return _DATA_UPGRADED;
            }
            set
            {
                if (_DATA_UPGRADED != value)
                {
                    _DATA_UPGRADED = value;
                    OnPropertyChanged("DATA_UPGRADED");
                }
            }
        }
        private string _DATA_UPGRADED;

    
        /// <summary>
        /// There are no comments for HISTOGRAM in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public virtual string HISTOGRAM
        {
            get
            {
                return _HISTOGRAM;
            }
            set
            {
                if (_HISTOGRAM != value)
                {
                    _HISTOGRAM = value;
                    OnPropertyChanged("HISTOGRAM");
                }
            }
        }
        private string _HISTOGRAM;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_TAB_COLUMNS obj = new DBA_TAB_COLUMNS();
            obj.OWNER = OWNER;
            obj.TABLE_NAME = TABLE_NAME;
            obj.COLUMN_NAME = COLUMN_NAME;
            obj.DATA_TYPE = DATA_TYPE;
            obj.DATA_TYPE_MOD = DATA_TYPE_MOD;
            obj.DATA_TYPE_OWNER = DATA_TYPE_OWNER;
            obj.DATA_LENGTH = DATA_LENGTH;
            obj.DATA_PRECISION = DATA_PRECISION;
            obj.DATA_SCALE = DATA_SCALE;
            obj.NULLABLE = NULLABLE;
            obj.COLUMN_ID = COLUMN_ID;
            obj.DEFAULT_LENGTH = DEFAULT_LENGTH;
            obj.DATA_DEFAULT = DATA_DEFAULT;
            obj.NUM_DISTINCT = NUM_DISTINCT;
            obj.LOW_VALUE = LOW_VALUE;
            obj.HIGH_VALUE = HIGH_VALUE;
            obj.DENSITY = DENSITY;
            obj.NUM_NULLS = NUM_NULLS;
            obj.NUM_BUCKETS = NUM_BUCKETS;
            obj.LAST_ANALYZED = LAST_ANALYZED;
            obj.SAMPLE_SIZE = SAMPLE_SIZE;
            obj.CHARACTER_SET_NAME = CHARACTER_SET_NAME;
            obj.CHAR_COL_DECL_LENGTH = CHAR_COL_DECL_LENGTH;
            obj.GLOBAL_STATS = GLOBAL_STATS;
            obj.USER_STATS = USER_STATS;
            obj.AVG_COL_LEN = AVG_COL_LEN;
            obj.CHAR_LENGTH = CHAR_LENGTH;
            obj.CHAR_USED = CHAR_USED;
            obj.V80_FMT_IMAGE = V80_FMT_IMAGE;
            obj.DATA_UPGRADED = DATA_UPGRADED;
            obj.HISTOGRAM = HISTOGRAM;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
