//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description of the dba functions/procedures/packages/types/triggers
    /// </summary>
    public partial class DBA_PROCEDURES : ICloneable, INotifyPropertyChanged    {

        public DBA_PROCEDURES()
        {
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for OWNER in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the object: top level function/procedure/package/type/trigger name
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OBJECT_NAME
        {
            get
            {
                return _OBJECT_NAME;
            }
            set
            {
                if (_OBJECT_NAME != value)
                {
                    _OBJECT_NAME = value;
                    OnPropertyChanged("OBJECT_NAME");
                }
            }
        }
        private string _OBJECT_NAME;

    
        /// <summary>
        /// Name of the package or type subprogram
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string PROCEDURE_NAME
        {
            get
            {
                return _PROCEDURE_NAME;
            }
            set
            {
                if (_PROCEDURE_NAME != value)
                {
                    _PROCEDURE_NAME = value;
                    OnPropertyChanged("PROCEDURE_NAME");
                }
            }
        }
        private string _PROCEDURE_NAME;

    
        /// <summary>
        /// Object number of the object
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal OBJECT_ID
        {
            get
            {
                return _OBJECT_ID;
            }
            set
            {
                if (_OBJECT_ID != value)
                {
                    _OBJECT_ID = value;
                    OnPropertyChanged("OBJECT_ID");
                }
            }
        }
        private decimal _OBJECT_ID;

    
        /// <summary>
        /// Unique sub-program identifier
        /// </summary>
        public virtual global::System.Nullable<decimal> SUBPROGRAM_ID
        {
            get
            {
                return _SUBPROGRAM_ID;
            }
            set
            {
                if (_SUBPROGRAM_ID != value)
                {
                    _SUBPROGRAM_ID = value;
                    OnPropertyChanged("SUBPROGRAM_ID");
                }
            }
        }
        private global::System.Nullable<decimal> _SUBPROGRAM_ID;

    
        /// <summary>
        /// Overload unique identifier
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public virtual string OVERLOAD
        {
            get
            {
                return _OVERLOAD;
            }
            set
            {
                if (_OVERLOAD != value)
                {
                    _OVERLOAD = value;
                    OnPropertyChanged("OVERLOAD");
                }
            }
        }
        private string _OVERLOAD;

    
        /// <summary>
        /// The typename of the object
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public virtual string OBJECT_TYPE
        {
            get
            {
                return _OBJECT_TYPE;
            }
            set
            {
                if (_OBJECT_TYPE != value)
                {
                    _OBJECT_TYPE = value;
                    OnPropertyChanged("OBJECT_TYPE");
                }
            }
        }
        private string _OBJECT_TYPE;

    
        /// <summary>
        /// Is it an aggregate function ?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string AGGREGATE
        {
            get
            {
                return _AGGREGATE;
            }
            set
            {
                if (_AGGREGATE != value)
                {
                    _AGGREGATE = value;
                    OnPropertyChanged("AGGREGATE");
                }
            }
        }
        private string _AGGREGATE;

    
        /// <summary>
        /// Is it a pipelined table function ?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string PIPELINED
        {
            get
            {
                return _PIPELINED;
            }
            set
            {
                if (_PIPELINED != value)
                {
                    _PIPELINED = value;
                    OnPropertyChanged("PIPELINED");
                }
            }
        }
        private string _PIPELINED;

    
        /// <summary>
        /// Name of the owner of the implementation type (if any)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string IMPLTYPEOWNER
        {
            get
            {
                return _IMPLTYPEOWNER;
            }
            set
            {
                if (_IMPLTYPEOWNER != value)
                {
                    _IMPLTYPEOWNER = value;
                    OnPropertyChanged("IMPLTYPEOWNER");
                }
            }
        }
        private string _IMPLTYPEOWNER;

    
        /// <summary>
        /// Name of the implementation type (if any)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string IMPLTYPENAME
        {
            get
            {
                return _IMPLTYPENAME;
            }
            set
            {
                if (_IMPLTYPENAME != value)
                {
                    _IMPLTYPENAME = value;
                    OnPropertyChanged("IMPLTYPENAME");
                }
            }
        }
        private string _IMPLTYPENAME;

    
        /// <summary>
        /// Is the procedure parallel enabled ?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string PARALLEL
        {
            get
            {
                return _PARALLEL;
            }
            set
            {
                if (_PARALLEL != value)
                {
                    _PARALLEL = value;
                    OnPropertyChanged("PARALLEL");
                }
            }
        }
        private string _PARALLEL;

    
        /// <summary>
        /// There are no comments for INTERFACE in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string INTERFACE
        {
            get
            {
                return _INTERFACE;
            }
            set
            {
                if (_INTERFACE != value)
                {
                    _INTERFACE = value;
                    OnPropertyChanged("INTERFACE");
                }
            }
        }
        private string _INTERFACE;

    
        /// <summary>
        /// There are no comments for DETERMINISTIC in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string DETERMINISTIC
        {
            get
            {
                return _DETERMINISTIC;
            }
            set
            {
                if (_DETERMINISTIC != value)
                {
                    _DETERMINISTIC = value;
                    OnPropertyChanged("DETERMINISTIC");
                }
            }
        }
        private string _DETERMINISTIC;

    
        /// <summary>
        /// There are no comments for AUTHID in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public virtual string AUTHID
        {
            get
            {
                return _AUTHID;
            }
            set
            {
                if (_AUTHID != value)
                {
                    _AUTHID = value;
                    OnPropertyChanged("AUTHID");
                }
            }
        }
        private string _AUTHID;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_PROCEDURES obj = new DBA_PROCEDURES();
            obj.OWNER = OWNER;
            obj.OBJECT_NAME = OBJECT_NAME;
            obj.PROCEDURE_NAME = PROCEDURE_NAME;
            obj.OBJECT_ID = OBJECT_ID;
            obj.SUBPROGRAM_ID = SUBPROGRAM_ID;
            obj.OVERLOAD = OVERLOAD;
            obj.OBJECT_TYPE = OBJECT_TYPE;
            obj.AGGREGATE = AGGREGATE;
            obj.PIPELINED = PIPELINED;
            obj.IMPLTYPEOWNER = IMPLTYPEOWNER;
            obj.IMPLTYPENAME = IMPLTYPENAME;
            obj.PARALLEL = PARALLEL;
            obj.INTERFACE = INTERFACE;
            obj.DETERMINISTIC = DETERMINISTIC;
            obj.AUTHID = AUTHID;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
