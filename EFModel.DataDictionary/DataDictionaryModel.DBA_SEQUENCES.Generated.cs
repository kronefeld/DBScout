//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description of all SEQUENCEs in the database
    /// </summary>
    public partial class DBA_SEQUENCES : ICloneable, INotifyPropertyChanged    {

        public DBA_SEQUENCES()
        {
        }

        #region Properties
    
        /// <summary>
        /// Name of the owner of the sequence
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string SEQUENCE_OWNER
        {
            get
            {
                return _SEQUENCE_OWNER;
            }
            set
            {
                if (_SEQUENCE_OWNER != value)
                {
                    _SEQUENCE_OWNER = value;
                    OnPropertyChanged("SEQUENCE_OWNER");
                }
            }
        }
        private string _SEQUENCE_OWNER;

    
        /// <summary>
        /// SEQUENCE name
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string SEQUENCE_NAME
        {
            get
            {
                return _SEQUENCE_NAME;
            }
            set
            {
                if (_SEQUENCE_NAME != value)
                {
                    _SEQUENCE_NAME = value;
                    OnPropertyChanged("SEQUENCE_NAME");
                }
            }
        }
        private string _SEQUENCE_NAME;

    
        /// <summary>
        /// Minimum value of the sequence
        /// </summary>
        public virtual global::System.Nullable<decimal> MIN_VALUE
        {
            get
            {
                return _MIN_VALUE;
            }
            set
            {
                if (_MIN_VALUE != value)
                {
                    _MIN_VALUE = value;
                    OnPropertyChanged("MIN_VALUE");
                }
            }
        }
        private global::System.Nullable<decimal> _MIN_VALUE;

    
        /// <summary>
        /// Maximum value of the sequence
        /// </summary>
        public virtual global::System.Nullable<decimal> MAX_VALUE
        {
            get
            {
                return _MAX_VALUE;
            }
            set
            {
                if (_MAX_VALUE != value)
                {
                    _MAX_VALUE = value;
                    OnPropertyChanged("MAX_VALUE");
                }
            }
        }
        private global::System.Nullable<decimal> _MAX_VALUE;

    
        /// <summary>
        /// Value by which sequence is incremented
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal INCREMENT_BY
        {
            get
            {
                return _INCREMENT_BY;
            }
            set
            {
                if (_INCREMENT_BY != value)
                {
                    _INCREMENT_BY = value;
                    OnPropertyChanged("INCREMENT_BY");
                }
            }
        }
        private decimal _INCREMENT_BY;

    
        /// <summary>
        /// Does sequence wrap around on reaching limit?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string CYCLE_FLAG
        {
            get
            {
                return _CYCLE_FLAG;
            }
            set
            {
                if (_CYCLE_FLAG != value)
                {
                    _CYCLE_FLAG = value;
                    OnPropertyChanged("CYCLE_FLAG");
                }
            }
        }
        private string _CYCLE_FLAG;

    
        /// <summary>
        /// Are sequence numbers generated in order?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string ORDER_FLAG
        {
            get
            {
                return _ORDER_FLAG;
            }
            set
            {
                if (_ORDER_FLAG != value)
                {
                    _ORDER_FLAG = value;
                    OnPropertyChanged("ORDER_FLAG");
                }
            }
        }
        private string _ORDER_FLAG;

    
        /// <summary>
        /// Number of sequence numbers to cache
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal CACHE_SIZE
        {
            get
            {
                return _CACHE_SIZE;
            }
            set
            {
                if (_CACHE_SIZE != value)
                {
                    _CACHE_SIZE = value;
                    OnPropertyChanged("CACHE_SIZE");
                }
            }
        }
        private decimal _CACHE_SIZE;

    
        /// <summary>
        /// Last sequence number written to disk
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal LAST_NUMBER
        {
            get
            {
                return _LAST_NUMBER;
            }
            set
            {
                if (_LAST_NUMBER != value)
                {
                    _LAST_NUMBER = value;
                    OnPropertyChanged("LAST_NUMBER");
                }
            }
        }
        private decimal _LAST_NUMBER;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_SEQUENCES obj = new DBA_SEQUENCES();
            obj.SEQUENCE_OWNER = SEQUENCE_OWNER;
            obj.SEQUENCE_NAME = SEQUENCE_NAME;
            obj.MIN_VALUE = MIN_VALUE;
            obj.MAX_VALUE = MAX_VALUE;
            obj.INCREMENT_BY = INCREMENT_BY;
            obj.CYCLE_FLAG = CYCLE_FLAG;
            obj.ORDER_FLAG = ORDER_FLAG;
            obj.CACHE_SIZE = CACHE_SIZE;
            obj.LAST_NUMBER = LAST_NUMBER;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
