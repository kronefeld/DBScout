//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description of rollback segments
    /// </summary>
    public partial class DBA_ROLLBACK_SEGS : ICloneable, INotifyPropertyChanged    {

        public DBA_ROLLBACK_SEGS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Name of the rollback segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string SEGMENT_NAME
        {
            get
            {
                return _SEGMENT_NAME;
            }
            set
            {
                if (_SEGMENT_NAME != value)
                {
                    _SEGMENT_NAME = value;
                    OnPropertyChanged("SEGMENT_NAME");
                }
            }
        }
        private string _SEGMENT_NAME;

    
        /// <summary>
        /// Owner of the rollback segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the tablespace containing the rollback segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLESPACE_NAME
        {
            get
            {
                return _TABLESPACE_NAME;
            }
            set
            {
                if (_TABLESPACE_NAME != value)
                {
                    _TABLESPACE_NAME = value;
                    OnPropertyChanged("TABLESPACE_NAME");
                }
            }
        }
        private string _TABLESPACE_NAME;

    
        /// <summary>
        /// ID number of the rollback segment
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal SEGMENT_ID
        {
            get
            {
                return _SEGMENT_ID;
            }
            set
            {
                if (_SEGMENT_ID != value)
                {
                    _SEGMENT_ID = value;
                    OnPropertyChanged("SEGMENT_ID");
                }
            }
        }
        private decimal _SEGMENT_ID;

    
        /// <summary>
        /// ID number of the file containing the segment header
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal FILE_ID
        {
            get
            {
                return _FILE_ID;
            }
            set
            {
                if (_FILE_ID != value)
                {
                    _FILE_ID = value;
                    OnPropertyChanged("FILE_ID");
                }
            }
        }
        private decimal _FILE_ID;

    
        /// <summary>
        /// ID number of the block containing the segment header
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal BLOCK_ID
        {
            get
            {
                return _BLOCK_ID;
            }
            set
            {
                if (_BLOCK_ID != value)
                {
                    _BLOCK_ID = value;
                    OnPropertyChanged("BLOCK_ID");
                }
            }
        }
        private decimal _BLOCK_ID;

    
        /// <summary>
        /// Initial extent size in bytes
        /// </summary>
        public virtual global::System.Nullable<decimal> INITIAL_EXTENT
        {
            get
            {
                return _INITIAL_EXTENT;
            }
            set
            {
                if (_INITIAL_EXTENT != value)
                {
                    _INITIAL_EXTENT = value;
                    OnPropertyChanged("INITIAL_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _INITIAL_EXTENT;

    
        /// <summary>
        /// Secondary extent size in bytes
        /// </summary>
        public virtual global::System.Nullable<decimal> NEXT_EXTENT
        {
            get
            {
                return _NEXT_EXTENT;
            }
            set
            {
                if (_NEXT_EXTENT != value)
                {
                    _NEXT_EXTENT = value;
                    OnPropertyChanged("NEXT_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _NEXT_EXTENT;

    
        /// <summary>
        /// Minimum number of extents
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal MIN_EXTENTS
        {
            get
            {
                return _MIN_EXTENTS;
            }
            set
            {
                if (_MIN_EXTENTS != value)
                {
                    _MIN_EXTENTS = value;
                    OnPropertyChanged("MIN_EXTENTS");
                }
            }
        }
        private decimal _MIN_EXTENTS;

    
        /// <summary>
        /// Maximum number of extents
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal MAX_EXTENTS
        {
            get
            {
                return _MAX_EXTENTS;
            }
            set
            {
                if (_MAX_EXTENTS != value)
                {
                    _MAX_EXTENTS = value;
                    OnPropertyChanged("MAX_EXTENTS");
                }
            }
        }
        private decimal _MAX_EXTENTS;

    
        /// <summary>
        /// Percent increase for extent size
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_INCREASE
        {
            get
            {
                return _PCT_INCREASE;
            }
            set
            {
                if (_PCT_INCREASE != value)
                {
                    _PCT_INCREASE = value;
                    OnPropertyChanged("PCT_INCREASE");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_INCREASE;

    
        /// <summary>
        /// Rollback segment status
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public virtual string STATUS
        {
            get
            {
                return _STATUS;
            }
            set
            {
                if (_STATUS != value)
                {
                    _STATUS = value;
                    OnPropertyChanged("STATUS");
                }
            }
        }
        private string _STATUS;

    
        /// <summary>
        /// Rollback segment owning parallel server instance number
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public virtual string INSTANCE_NUM
        {
            get
            {
                return _INSTANCE_NUM;
            }
            set
            {
                if (_INSTANCE_NUM != value)
                {
                    _INSTANCE_NUM = value;
                    OnPropertyChanged("INSTANCE_NUM");
                }
            }
        }
        private string _INSTANCE_NUM;

    
        /// <summary>
        /// Relative number of the file containing the segment header
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual decimal RELATIVE_FNO
        {
            get
            {
                return _RELATIVE_FNO;
            }
            set
            {
                if (_RELATIVE_FNO != value)
                {
                    _RELATIVE_FNO = value;
                    OnPropertyChanged("RELATIVE_FNO");
                }
            }
        }
        private decimal _RELATIVE_FNO;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_ROLLBACK_SEGS obj = new DBA_ROLLBACK_SEGS();
            obj.SEGMENT_NAME = SEGMENT_NAME;
            obj.OWNER = OWNER;
            obj.TABLESPACE_NAME = TABLESPACE_NAME;
            obj.SEGMENT_ID = SEGMENT_ID;
            obj.FILE_ID = FILE_ID;
            obj.BLOCK_ID = BLOCK_ID;
            obj.INITIAL_EXTENT = INITIAL_EXTENT;
            obj.NEXT_EXTENT = NEXT_EXTENT;
            obj.MIN_EXTENTS = MIN_EXTENTS;
            obj.MAX_EXTENTS = MAX_EXTENTS;
            obj.PCT_INCREASE = PCT_INCREASE;
            obj.STATUS = STATUS;
            obj.INSTANCE_NUM = INSTANCE_NUM;
            obj.RELATIVE_FNO = RELATIVE_FNO;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
