//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Constraint definitions on all tables
    /// </summary>
    public partial class DBA_CONSTRAINTS : ICloneable, INotifyPropertyChanged    {

        public DBA_CONSTRAINTS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the table
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name associated with constraint definition
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string CONSTRAINT_NAME
        {
            get
            {
                return _CONSTRAINT_NAME;
            }
            set
            {
                if (_CONSTRAINT_NAME != value)
                {
                    _CONSTRAINT_NAME = value;
                    OnPropertyChanged("CONSTRAINT_NAME");
                }
            }
        }
        private string _CONSTRAINT_NAME;

    
        /// <summary>
        /// Type of constraint definition
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string CONSTRAINT_TYPE
        {
            get
            {
                return _CONSTRAINT_TYPE;
            }
            set
            {
                if (_CONSTRAINT_TYPE != value)
                {
                    _CONSTRAINT_TYPE = value;
                    OnPropertyChanged("CONSTRAINT_TYPE");
                }
            }
        }
        private string _CONSTRAINT_TYPE;

    
        /// <summary>
        /// Name associated with table with constraint definition
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLE_NAME
        {
            get
            {
                return _TABLE_NAME;
            }
            set
            {
                if (_TABLE_NAME != value)
                {
                    _TABLE_NAME = value;
                    OnPropertyChanged("TABLE_NAME");
                }
            }
        }
        private string _TABLE_NAME;

    
        /// <summary>
        /// Text of search condition for table check
        /// </summary>
        public virtual string SEARCH_CONDITION
        {
            get
            {
                return _SEARCH_CONDITION;
            }
            set
            {
                if (_SEARCH_CONDITION != value)
                {
                    _SEARCH_CONDITION = value;
                    OnPropertyChanged("SEARCH_CONDITION");
                }
            }
        }
        private string _SEARCH_CONDITION;

    
        /// <summary>
        /// Owner of table used in referential constraint
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string R_OWNER
        {
            get
            {
                return _R_OWNER;
            }
            set
            {
                if (_R_OWNER != value)
                {
                    _R_OWNER = value;
                    OnPropertyChanged("R_OWNER");
                }
            }
        }
        private string _R_OWNER;

    
        /// <summary>
        /// Name of unique constraint definition for referenced table
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string R_CONSTRAINT_NAME
        {
            get
            {
                return _R_CONSTRAINT_NAME;
            }
            set
            {
                if (_R_CONSTRAINT_NAME != value)
                {
                    _R_CONSTRAINT_NAME = value;
                    OnPropertyChanged("R_CONSTRAINT_NAME");
                }
            }
        }
        private string _R_CONSTRAINT_NAME;

    
        /// <summary>
        /// The delete rule for a referential constraint
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public virtual string DELETE_RULE
        {
            get
            {
                return _DELETE_RULE;
            }
            set
            {
                if (_DELETE_RULE != value)
                {
                    _DELETE_RULE = value;
                    OnPropertyChanged("DELETE_RULE");
                }
            }
        }
        private string _DELETE_RULE;

    
        /// <summary>
        /// Enforcement status of constraint - ENABLED or DISABLED
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string STATUS
        {
            get
            {
                return _STATUS;
            }
            set
            {
                if (_STATUS != value)
                {
                    _STATUS = value;
                    OnPropertyChanged("STATUS");
                }
            }
        }
        private string _STATUS;

    
        /// <summary>
        /// Is the constraint deferrable - DEFERRABLE or NOT DEFERRABLE
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public virtual string DEFERRABLE
        {
            get
            {
                return _DEFERRABLE;
            }
            set
            {
                if (_DEFERRABLE != value)
                {
                    _DEFERRABLE = value;
                    OnPropertyChanged("DEFERRABLE");
                }
            }
        }
        private string _DEFERRABLE;

    
        /// <summary>
        /// Is the constraint deferred by default -  DEFERRED or IMMEDIATE
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public virtual string DEFERRED
        {
            get
            {
                return _DEFERRED;
            }
            set
            {
                if (_DEFERRED != value)
                {
                    _DEFERRED = value;
                    OnPropertyChanged("DEFERRED");
                }
            }
        }
        private string _DEFERRED;

    
        /// <summary>
        /// Was this constraint system validated? -  VALIDATED or NOT VALIDATED
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public virtual string VALIDATED
        {
            get
            {
                return _VALIDATED;
            }
            set
            {
                if (_VALIDATED != value)
                {
                    _VALIDATED = value;
                    OnPropertyChanged("VALIDATED");
                }
            }
        }
        private string _VALIDATED;

    
        /// <summary>
        /// Was the constraint name system generated? -  GENERATED NAME or USER NAME
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public virtual string GENERATED
        {
            get
            {
                return _GENERATED;
            }
            set
            {
                if (_GENERATED != value)
                {
                    _GENERATED = value;
                    OnPropertyChanged("GENERATED");
                }
            }
        }
        private string _GENERATED;

    
        /// <summary>
        /// Creating this constraint should give ORA-02436.  Rewrite it before 2000 AD.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string BAD
        {
            get
            {
                return _BAD;
            }
            set
            {
                if (_BAD != value)
                {
                    _BAD = value;
                    OnPropertyChanged("BAD");
                }
            }
        }
        private string _BAD;

    
        /// <summary>
        /// If set, this flag will be used in optimizer
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public virtual string RELY
        {
            get
            {
                return _RELY;
            }
            set
            {
                if (_RELY != value)
                {
                    _RELY = value;
                    OnPropertyChanged("RELY");
                }
            }
        }
        private string _RELY;

    
        /// <summary>
        /// The date when this column was last enabled or disabled
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> LAST_CHANGE
        {
            get
            {
                return _LAST_CHANGE;
            }
            set
            {
                if (_LAST_CHANGE != value)
                {
                    _LAST_CHANGE = value;
                    OnPropertyChanged("LAST_CHANGE");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _LAST_CHANGE;

    
        /// <summary>
        /// The owner of the index used by this constraint
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string INDEX_OWNER
        {
            get
            {
                return _INDEX_OWNER;
            }
            set
            {
                if (_INDEX_OWNER != value)
                {
                    _INDEX_OWNER = value;
                    OnPropertyChanged("INDEX_OWNER");
                }
            }
        }
        private string _INDEX_OWNER;

    
        /// <summary>
        /// The index used by this constraint
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string INDEX_NAME
        {
            get
            {
                return _INDEX_NAME;
            }
            set
            {
                if (_INDEX_NAME != value)
                {
                    _INDEX_NAME = value;
                    OnPropertyChanged("INDEX_NAME");
                }
            }
        }
        private string _INDEX_NAME;

    
        /// <summary>
        /// There are no comments for INVALID in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public virtual string INVALID
        {
            get
            {
                return _INVALID;
            }
            set
            {
                if (_INVALID != value)
                {
                    _INVALID = value;
                    OnPropertyChanged("INVALID");
                }
            }
        }
        private string _INVALID;

    
        /// <summary>
        /// There are no comments for VIEW_RELATED in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public virtual string VIEW_RELATED
        {
            get
            {
                return _VIEW_RELATED;
            }
            set
            {
                if (_VIEW_RELATED != value)
                {
                    _VIEW_RELATED = value;
                    OnPropertyChanged("VIEW_RELATED");
                }
            }
        }
        private string _VIEW_RELATED;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_CONSTRAINTS obj = new DBA_CONSTRAINTS();
            obj.OWNER = OWNER;
            obj.CONSTRAINT_NAME = CONSTRAINT_NAME;
            obj.CONSTRAINT_TYPE = CONSTRAINT_TYPE;
            obj.TABLE_NAME = TABLE_NAME;
            obj.SEARCH_CONDITION = SEARCH_CONDITION;
            obj.R_OWNER = R_OWNER;
            obj.R_CONSTRAINT_NAME = R_CONSTRAINT_NAME;
            obj.DELETE_RULE = DELETE_RULE;
            obj.STATUS = STATUS;
            obj.DEFERRABLE = DEFERRABLE;
            obj.DEFERRED = DEFERRED;
            obj.VALIDATED = VALIDATED;
            obj.GENERATED = GENERATED;
            obj.BAD = BAD;
            obj.RELY = RELY;
            obj.LAST_CHANGE = LAST_CHANGE;
            obj.INDEX_OWNER = INDEX_OWNER;
            obj.INDEX_NAME = INDEX_NAME;
            obj.INVALID = INVALID;
            obj.VIEW_RELATED = VIEW_RELATED;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
