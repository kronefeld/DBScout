//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description for all indexes in the database
    /// </summary>
    public partial class DBA_INDEXES : ICloneable, INotifyPropertyChanged    {

        public DBA_INDEXES()
        {
        }

        #region Properties
    
        /// <summary>
        /// Username of the owner of the index
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the index
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string INDEX_NAME
        {
            get
            {
                return _INDEX_NAME;
            }
            set
            {
                if (_INDEX_NAME != value)
                {
                    _INDEX_NAME = value;
                    OnPropertyChanged("INDEX_NAME");
                }
            }
        }
        private string _INDEX_NAME;

    
        /// <summary>
        /// There are no comments for INDEX_TYPE in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(27)]
        public virtual string INDEX_TYPE
        {
            get
            {
                return _INDEX_TYPE;
            }
            set
            {
                if (_INDEX_TYPE != value)
                {
                    _INDEX_TYPE = value;
                    OnPropertyChanged("INDEX_TYPE");
                }
            }
        }
        private string _INDEX_TYPE;

    
        /// <summary>
        /// Owner of the indexed object
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLE_OWNER
        {
            get
            {
                return _TABLE_OWNER;
            }
            set
            {
                if (_TABLE_OWNER != value)
                {
                    _TABLE_OWNER = value;
                    OnPropertyChanged("TABLE_OWNER");
                }
            }
        }
        private string _TABLE_OWNER;

    
        /// <summary>
        /// Name of the indexed object
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLE_NAME
        {
            get
            {
                return _TABLE_NAME;
            }
            set
            {
                if (_TABLE_NAME != value)
                {
                    _TABLE_NAME = value;
                    OnPropertyChanged("TABLE_NAME");
                }
            }
        }
        private string _TABLE_NAME;

    
        /// <summary>
        /// Type of the indexed object
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public virtual string TABLE_TYPE
        {
            get
            {
                return _TABLE_TYPE;
            }
            set
            {
                if (_TABLE_TYPE != value)
                {
                    _TABLE_TYPE = value;
                    OnPropertyChanged("TABLE_TYPE");
                }
            }
        }
        private string _TABLE_TYPE;

    
        /// <summary>
        /// Uniqueness status of the index: "UNIQUE",  "NONUNIQUE", or "BITMAP"
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public virtual string UNIQUENESS
        {
            get
            {
                return _UNIQUENESS;
            }
            set
            {
                if (_UNIQUENESS != value)
                {
                    _UNIQUENESS = value;
                    OnPropertyChanged("UNIQUENESS");
                }
            }
        }
        private string _UNIQUENESS;

    
        /// <summary>
        /// Compression property of the index: "ENABLED",  "DISABLED", or NULL
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string COMPRESSION
        {
            get
            {
                return _COMPRESSION;
            }
            set
            {
                if (_COMPRESSION != value)
                {
                    _COMPRESSION = value;
                    OnPropertyChanged("COMPRESSION");
                }
            }
        }
        private string _COMPRESSION;

    
        /// <summary>
        /// Number of key columns in the prefix used for compression
        /// </summary>
        public virtual global::System.Nullable<decimal> PREFIX_LENGTH
        {
            get
            {
                return _PREFIX_LENGTH;
            }
            set
            {
                if (_PREFIX_LENGTH != value)
                {
                    _PREFIX_LENGTH = value;
                    OnPropertyChanged("PREFIX_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _PREFIX_LENGTH;

    
        /// <summary>
        /// Name of the tablespace containing the index
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLESPACE_NAME
        {
            get
            {
                return _TABLESPACE_NAME;
            }
            set
            {
                if (_TABLESPACE_NAME != value)
                {
                    _TABLESPACE_NAME = value;
                    OnPropertyChanged("TABLESPACE_NAME");
                }
            }
        }
        private string _TABLESPACE_NAME;

    
        /// <summary>
        /// Initial number of transactions
        /// </summary>
        public virtual global::System.Nullable<decimal> INI_TRANS
        {
            get
            {
                return _INI_TRANS;
            }
            set
            {
                if (_INI_TRANS != value)
                {
                    _INI_TRANS = value;
                    OnPropertyChanged("INI_TRANS");
                }
            }
        }
        private global::System.Nullable<decimal> _INI_TRANS;

    
        /// <summary>
        /// Maximum number of transactions
        /// </summary>
        public virtual global::System.Nullable<decimal> MAX_TRANS
        {
            get
            {
                return _MAX_TRANS;
            }
            set
            {
                if (_MAX_TRANS != value)
                {
                    _MAX_TRANS = value;
                    OnPropertyChanged("MAX_TRANS");
                }
            }
        }
        private global::System.Nullable<decimal> _MAX_TRANS;

    
        /// <summary>
        /// Size of the initial extent
        /// </summary>
        public virtual global::System.Nullable<decimal> INITIAL_EXTENT
        {
            get
            {
                return _INITIAL_EXTENT;
            }
            set
            {
                if (_INITIAL_EXTENT != value)
                {
                    _INITIAL_EXTENT = value;
                    OnPropertyChanged("INITIAL_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _INITIAL_EXTENT;

    
        /// <summary>
        /// Size of secondary extents
        /// </summary>
        public virtual global::System.Nullable<decimal> NEXT_EXTENT
        {
            get
            {
                return _NEXT_EXTENT;
            }
            set
            {
                if (_NEXT_EXTENT != value)
                {
                    _NEXT_EXTENT = value;
                    OnPropertyChanged("NEXT_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _NEXT_EXTENT;

    
        /// <summary>
        /// Minimum number of extents allowed in the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> MIN_EXTENTS
        {
            get
            {
                return _MIN_EXTENTS;
            }
            set
            {
                if (_MIN_EXTENTS != value)
                {
                    _MIN_EXTENTS = value;
                    OnPropertyChanged("MIN_EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _MIN_EXTENTS;

    
        /// <summary>
        /// Maximum number of extents allowed in the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> MAX_EXTENTS
        {
            get
            {
                return _MAX_EXTENTS;
            }
            set
            {
                if (_MAX_EXTENTS != value)
                {
                    _MAX_EXTENTS = value;
                    OnPropertyChanged("MAX_EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _MAX_EXTENTS;

    
        /// <summary>
        /// Percentage increase in extent size
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_INCREASE
        {
            get
            {
                return _PCT_INCREASE;
            }
            set
            {
                if (_PCT_INCREASE != value)
                {
                    _PCT_INCREASE = value;
                    OnPropertyChanged("PCT_INCREASE");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_INCREASE;

    
        /// <summary>
        /// Threshold percentage of block space allowed per index entry
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_THRESHOLD
        {
            get
            {
                return _PCT_THRESHOLD;
            }
            set
            {
                if (_PCT_THRESHOLD != value)
                {
                    _PCT_THRESHOLD = value;
                    OnPropertyChanged("PCT_THRESHOLD");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_THRESHOLD;

    
        /// <summary>
        /// User column-id for last column to be included in index-only table top index
        /// </summary>
        public virtual global::System.Nullable<decimal> INCLUDE_COLUMN
        {
            get
            {
                return _INCLUDE_COLUMN;
            }
            set
            {
                if (_INCLUDE_COLUMN != value)
                {
                    _INCLUDE_COLUMN = value;
                    OnPropertyChanged("INCLUDE_COLUMN");
                }
            }
        }
        private global::System.Nullable<decimal> _INCLUDE_COLUMN;

    
        /// <summary>
        /// Number of process freelists allocated in this segment
        /// </summary>
        public virtual global::System.Nullable<decimal> FREELISTS
        {
            get
            {
                return _FREELISTS;
            }
            set
            {
                if (_FREELISTS != value)
                {
                    _FREELISTS = value;
                    OnPropertyChanged("FREELISTS");
                }
            }
        }
        private global::System.Nullable<decimal> _FREELISTS;

    
        /// <summary>
        /// Number of freelist groups allocated to this segment
        /// </summary>
        public virtual global::System.Nullable<decimal> FREELIST_GROUPS
        {
            get
            {
                return _FREELIST_GROUPS;
            }
            set
            {
                if (_FREELIST_GROUPS != value)
                {
                    _FREELIST_GROUPS = value;
                    OnPropertyChanged("FREELIST_GROUPS");
                }
            }
        }
        private global::System.Nullable<decimal> _FREELIST_GROUPS;

    
        /// <summary>
        /// Minimum percentage of free space in a block
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_FREE
        {
            get
            {
                return _PCT_FREE;
            }
            set
            {
                if (_PCT_FREE != value)
                {
                    _PCT_FREE = value;
                    OnPropertyChanged("PCT_FREE");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_FREE;

    
        /// <summary>
        /// Logging attribute
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string LOGGING
        {
            get
            {
                return _LOGGING;
            }
            set
            {
                if (_LOGGING != value)
                {
                    _LOGGING = value;
                    OnPropertyChanged("LOGGING");
                }
            }
        }
        private string _LOGGING;

    
        /// <summary>
        /// B-Tree level
        /// </summary>
        public virtual global::System.Nullable<decimal> BLEVEL
        {
            get
            {
                return _BLEVEL;
            }
            set
            {
                if (_BLEVEL != value)
                {
                    _BLEVEL = value;
                    OnPropertyChanged("BLEVEL");
                }
            }
        }
        private global::System.Nullable<decimal> _BLEVEL;

    
        /// <summary>
        /// The number of leaf blocks in the index
        /// </summary>
        public virtual global::System.Nullable<decimal> LEAF_BLOCKS
        {
            get
            {
                return _LEAF_BLOCKS;
            }
            set
            {
                if (_LEAF_BLOCKS != value)
                {
                    _LEAF_BLOCKS = value;
                    OnPropertyChanged("LEAF_BLOCKS");
                }
            }
        }
        private global::System.Nullable<decimal> _LEAF_BLOCKS;

    
        /// <summary>
        /// The number of distinct keys in the index
        /// </summary>
        public virtual global::System.Nullable<decimal> DISTINCT_KEYS
        {
            get
            {
                return _DISTINCT_KEYS;
            }
            set
            {
                if (_DISTINCT_KEYS != value)
                {
                    _DISTINCT_KEYS = value;
                    OnPropertyChanged("DISTINCT_KEYS");
                }
            }
        }
        private global::System.Nullable<decimal> _DISTINCT_KEYS;

    
        /// <summary>
        /// The average number of leaf blocks per key
        /// </summary>
        public virtual global::System.Nullable<decimal> AVG_LEAF_BLOCKS_PER_KEY
        {
            get
            {
                return _AVG_LEAF_BLOCKS_PER_KEY;
            }
            set
            {
                if (_AVG_LEAF_BLOCKS_PER_KEY != value)
                {
                    _AVG_LEAF_BLOCKS_PER_KEY = value;
                    OnPropertyChanged("AVG_LEAF_BLOCKS_PER_KEY");
                }
            }
        }
        private global::System.Nullable<decimal> _AVG_LEAF_BLOCKS_PER_KEY;

    
        /// <summary>
        /// The average number of data blocks per key
        /// </summary>
        public virtual global::System.Nullable<decimal> AVG_DATA_BLOCKS_PER_KEY
        {
            get
            {
                return _AVG_DATA_BLOCKS_PER_KEY;
            }
            set
            {
                if (_AVG_DATA_BLOCKS_PER_KEY != value)
                {
                    _AVG_DATA_BLOCKS_PER_KEY = value;
                    OnPropertyChanged("AVG_DATA_BLOCKS_PER_KEY");
                }
            }
        }
        private global::System.Nullable<decimal> _AVG_DATA_BLOCKS_PER_KEY;

    
        /// <summary>
        /// A measurement of the amount of (dis)order of the table this index is for
        /// </summary>
        public virtual global::System.Nullable<decimal> CLUSTERING_FACTOR
        {
            get
            {
                return _CLUSTERING_FACTOR;
            }
            set
            {
                if (_CLUSTERING_FACTOR != value)
                {
                    _CLUSTERING_FACTOR = value;
                    OnPropertyChanged("CLUSTERING_FACTOR");
                }
            }
        }
        private global::System.Nullable<decimal> _CLUSTERING_FACTOR;

    
        /// <summary>
        /// Whether non-partitioned index is in UNUSABLE state or not
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string STATUS
        {
            get
            {
                return _STATUS;
            }
            set
            {
                if (_STATUS != value)
                {
                    _STATUS = value;
                    OnPropertyChanged("STATUS");
                }
            }
        }
        private string _STATUS;

    
        /// <summary>
        /// There are no comments for NUM_ROWS in the schema.
        /// </summary>
        public virtual global::System.Nullable<decimal> NUM_ROWS
        {
            get
            {
                return _NUM_ROWS;
            }
            set
            {
                if (_NUM_ROWS != value)
                {
                    _NUM_ROWS = value;
                    OnPropertyChanged("NUM_ROWS");
                }
            }
        }
        private global::System.Nullable<decimal> _NUM_ROWS;

    
        /// <summary>
        /// The sample size used in analyzing this index
        /// </summary>
        public virtual global::System.Nullable<decimal> SAMPLE_SIZE
        {
            get
            {
                return _SAMPLE_SIZE;
            }
            set
            {
                if (_SAMPLE_SIZE != value)
                {
                    _SAMPLE_SIZE = value;
                    OnPropertyChanged("SAMPLE_SIZE");
                }
            }
        }
        private global::System.Nullable<decimal> _SAMPLE_SIZE;

    
        /// <summary>
        /// The date of the most recent time this index was analyzed
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> LAST_ANALYZED
        {
            get
            {
                return _LAST_ANALYZED;
            }
            set
            {
                if (_LAST_ANALYZED != value)
                {
                    _LAST_ANALYZED = value;
                    OnPropertyChanged("LAST_ANALYZED");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _LAST_ANALYZED;

    
        /// <summary>
        /// The number of threads per instance for scanning the partitioned index
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public virtual string DEGREE
        {
            get
            {
                return _DEGREE;
            }
            set
            {
                if (_DEGREE != value)
                {
                    _DEGREE = value;
                    OnPropertyChanged("DEGREE");
                }
            }
        }
        private string _DEGREE;

    
        /// <summary>
        /// The number of instances across which the partitioned index is to be scanned
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public virtual string INSTANCES
        {
            get
            {
                return _INSTANCES;
            }
            set
            {
                if (_INSTANCES != value)
                {
                    _INSTANCES = value;
                    OnPropertyChanged("INSTANCES");
                }
            }
        }
        private string _INSTANCES;

    
        /// <summary>
        /// Is this index partitioned? YES or NO
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string PARTITIONED
        {
            get
            {
                return _PARTITIONED;
            }
            set
            {
                if (_PARTITIONED != value)
                {
                    _PARTITIONED = value;
                    OnPropertyChanged("PARTITIONED");
                }
            }
        }
        private string _PARTITIONED;

    
        /// <summary>
        /// Can the current session only see data that it place in this object itself?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string TEMPORARY
        {
            get
            {
                return _TEMPORARY;
            }
            set
            {
                if (_TEMPORARY != value)
                {
                    _TEMPORARY = value;
                    OnPropertyChanged("TEMPORARY");
                }
            }
        }
        private string _TEMPORARY;

    
        /// <summary>
        /// Was the name of this index system generated?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string GENERATED
        {
            get
            {
                return _GENERATED;
            }
            set
            {
                if (_GENERATED != value)
                {
                    _GENERATED = value;
                    OnPropertyChanged("GENERATED");
                }
            }
        }
        private string _GENERATED;

    
        /// <summary>
        /// Is the index object created as part of icreate for domain indexes?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string SECONDARY
        {
            get
            {
                return _SECONDARY;
            }
            set
            {
                if (_SECONDARY != value)
                {
                    _SECONDARY = value;
                    OnPropertyChanged("SECONDARY");
                }
            }
        }
        private string _SECONDARY;

    
        /// <summary>
        /// The default buffer pool to be used for index blocks
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public virtual string BUFFER_POOL
        {
            get
            {
                return _BUFFER_POOL;
            }
            set
            {
                if (_BUFFER_POOL != value)
                {
                    _BUFFER_POOL = value;
                    OnPropertyChanged("BUFFER_POOL");
                }
            }
        }
        private string _BUFFER_POOL;

    
        /// <summary>
        /// Were the statistics entered directly by the user?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string USER_STATS
        {
            get
            {
                return _USER_STATS;
            }
            set
            {
                if (_USER_STATS != value)
                {
                    _USER_STATS = value;
                    OnPropertyChanged("USER_STATS");
                }
            }
        }
        private string _USER_STATS;

    
        /// <summary>
        /// If index on temporary table, then duration is sys$session or sys$transaction else NULL
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public virtual string DURATION
        {
            get
            {
                return _DURATION;
            }
            set
            {
                if (_DURATION != value)
                {
                    _DURATION = value;
                    OnPropertyChanged("DURATION");
                }
            }
        }
        private string _DURATION;

    
        /// <summary>
        /// If index on IOT, then this is percentage of rows with Valid guess
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_DIRECT_ACCESS
        {
            get
            {
                return _PCT_DIRECT_ACCESS;
            }
            set
            {
                if (_PCT_DIRECT_ACCESS != value)
                {
                    _PCT_DIRECT_ACCESS = value;
                    OnPropertyChanged("PCT_DIRECT_ACCESS");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_DIRECT_ACCESS;

    
        /// <summary>
        /// If domain index, then this is the indextype owner
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string ITYP_OWNER
        {
            get
            {
                return _ITYP_OWNER;
            }
            set
            {
                if (_ITYP_OWNER != value)
                {
                    _ITYP_OWNER = value;
                    OnPropertyChanged("ITYP_OWNER");
                }
            }
        }
        private string _ITYP_OWNER;

    
        /// <summary>
        /// If domain index, then this is the name of the associated indextype
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string ITYP_NAME
        {
            get
            {
                return _ITYP_NAME;
            }
            set
            {
                if (_ITYP_NAME != value)
                {
                    _ITYP_NAME = value;
                    OnPropertyChanged("ITYP_NAME");
                }
            }
        }
        private string _ITYP_NAME;

    
        /// <summary>
        /// If domain index, then this is the parameter string
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public virtual string PARAMETERS
        {
            get
            {
                return _PARAMETERS;
            }
            set
            {
                if (_PARAMETERS != value)
                {
                    _PARAMETERS = value;
                    OnPropertyChanged("PARAMETERS");
                }
            }
        }
        private string _PARAMETERS;

    
        /// <summary>
        /// Are the statistics calculated without merging underlying partitions?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string GLOBAL_STATS
        {
            get
            {
                return _GLOBAL_STATS;
            }
            set
            {
                if (_GLOBAL_STATS != value)
                {
                    _GLOBAL_STATS = value;
                    OnPropertyChanged("GLOBAL_STATS");
                }
            }
        }
        private string _GLOBAL_STATS;

    
        /// <summary>
        /// Is the indextype of the domain index valid
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public virtual string DOMIDX_STATUS
        {
            get
            {
                return _DOMIDX_STATUS;
            }
            set
            {
                if (_DOMIDX_STATUS != value)
                {
                    _DOMIDX_STATUS = value;
                    OnPropertyChanged("DOMIDX_STATUS");
                }
            }
        }
        private string _DOMIDX_STATUS;

    
        /// <summary>
        /// Status of the operation on the domain index
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public virtual string DOMIDX_OPSTATUS
        {
            get
            {
                return _DOMIDX_OPSTATUS;
            }
            set
            {
                if (_DOMIDX_OPSTATUS != value)
                {
                    _DOMIDX_OPSTATUS = value;
                    OnPropertyChanged("DOMIDX_OPSTATUS");
                }
            }
        }
        private string _DOMIDX_OPSTATUS;

    
        /// <summary>
        /// Is the Function-based Index DISABLED or ENABLED?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string FUNCIDX_STATUS
        {
            get
            {
                return _FUNCIDX_STATUS;
            }
            set
            {
                if (_FUNCIDX_STATUS != value)
                {
                    _FUNCIDX_STATUS = value;
                    OnPropertyChanged("FUNCIDX_STATUS");
                }
            }
        }
        private string _FUNCIDX_STATUS;

    
        /// <summary>
        /// Is this index a join index?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string JOIN_INDEX
        {
            get
            {
                return _JOIN_INDEX;
            }
            set
            {
                if (_JOIN_INDEX != value)
                {
                    _JOIN_INDEX = value;
                    OnPropertyChanged("JOIN_INDEX");
                }
            }
        }
        private string _JOIN_INDEX;

    
        /// <summary>
        /// Were redundant primary key columns eliminated from iot secondary index?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string IOT_REDUNDANT_PKEY_ELIM
        {
            get
            {
                return _IOT_REDUNDANT_PKEY_ELIM;
            }
            set
            {
                if (_IOT_REDUNDANT_PKEY_ELIM != value)
                {
                    _IOT_REDUNDANT_PKEY_ELIM = value;
                    OnPropertyChanged("IOT_REDUNDANT_PKEY_ELIM");
                }
            }
        }
        private string _IOT_REDUNDANT_PKEY_ELIM;

    
        /// <summary>
        /// Whether index is dropped and is in Recycle Bin
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string DROPPED
        {
            get
            {
                return _DROPPED;
            }
            set
            {
                if (_DROPPED != value)
                {
                    _DROPPED = value;
                    OnPropertyChanged("DROPPED");
                }
            }
        }
        private string _DROPPED;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_INDEXES obj = new DBA_INDEXES();
            obj.OWNER = OWNER;
            obj.INDEX_NAME = INDEX_NAME;
            obj.INDEX_TYPE = INDEX_TYPE;
            obj.TABLE_OWNER = TABLE_OWNER;
            obj.TABLE_NAME = TABLE_NAME;
            obj.TABLE_TYPE = TABLE_TYPE;
            obj.UNIQUENESS = UNIQUENESS;
            obj.COMPRESSION = COMPRESSION;
            obj.PREFIX_LENGTH = PREFIX_LENGTH;
            obj.TABLESPACE_NAME = TABLESPACE_NAME;
            obj.INI_TRANS = INI_TRANS;
            obj.MAX_TRANS = MAX_TRANS;
            obj.INITIAL_EXTENT = INITIAL_EXTENT;
            obj.NEXT_EXTENT = NEXT_EXTENT;
            obj.MIN_EXTENTS = MIN_EXTENTS;
            obj.MAX_EXTENTS = MAX_EXTENTS;
            obj.PCT_INCREASE = PCT_INCREASE;
            obj.PCT_THRESHOLD = PCT_THRESHOLD;
            obj.INCLUDE_COLUMN = INCLUDE_COLUMN;
            obj.FREELISTS = FREELISTS;
            obj.FREELIST_GROUPS = FREELIST_GROUPS;
            obj.PCT_FREE = PCT_FREE;
            obj.LOGGING = LOGGING;
            obj.BLEVEL = BLEVEL;
            obj.LEAF_BLOCKS = LEAF_BLOCKS;
            obj.DISTINCT_KEYS = DISTINCT_KEYS;
            obj.AVG_LEAF_BLOCKS_PER_KEY = AVG_LEAF_BLOCKS_PER_KEY;
            obj.AVG_DATA_BLOCKS_PER_KEY = AVG_DATA_BLOCKS_PER_KEY;
            obj.CLUSTERING_FACTOR = CLUSTERING_FACTOR;
            obj.STATUS = STATUS;
            obj.NUM_ROWS = NUM_ROWS;
            obj.SAMPLE_SIZE = SAMPLE_SIZE;
            obj.LAST_ANALYZED = LAST_ANALYZED;
            obj.DEGREE = DEGREE;
            obj.INSTANCES = INSTANCES;
            obj.PARTITIONED = PARTITIONED;
            obj.TEMPORARY = TEMPORARY;
            obj.GENERATED = GENERATED;
            obj.SECONDARY = SECONDARY;
            obj.BUFFER_POOL = BUFFER_POOL;
            obj.USER_STATS = USER_STATS;
            obj.DURATION = DURATION;
            obj.PCT_DIRECT_ACCESS = PCT_DIRECT_ACCESS;
            obj.ITYP_OWNER = ITYP_OWNER;
            obj.ITYP_NAME = ITYP_NAME;
            obj.PARAMETERS = PARAMETERS;
            obj.GLOBAL_STATS = GLOBAL_STATS;
            obj.DOMIDX_STATUS = DOMIDX_STATUS;
            obj.DOMIDX_OPSTATUS = DOMIDX_OPSTATUS;
            obj.FUNCIDX_STATUS = FUNCIDX_STATUS;
            obj.JOIN_INDEX = JOIN_INDEX;
            obj.IOT_REDUNDANT_PKEY_ELIM = IOT_REDUNDANT_PKEY_ELIM;
            obj.DROPPED = DROPPED;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
