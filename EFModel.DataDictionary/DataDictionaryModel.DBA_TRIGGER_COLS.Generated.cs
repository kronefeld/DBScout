//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Column usage in all triggers
    /// </summary>
    public partial class DBA_TRIGGER_COLS : ICloneable, INotifyPropertyChanged    {

        public DBA_TRIGGER_COLS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the trigger
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TRIGGER_OWNER
        {
            get
            {
                return _TRIGGER_OWNER;
            }
            set
            {
                if (_TRIGGER_OWNER != value)
                {
                    _TRIGGER_OWNER = value;
                    OnPropertyChanged("TRIGGER_OWNER");
                }
            }
        }
        private string _TRIGGER_OWNER;

    
        /// <summary>
        /// Name of the trigger
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TRIGGER_NAME
        {
            get
            {
                return _TRIGGER_NAME;
            }
            set
            {
                if (_TRIGGER_NAME != value)
                {
                    _TRIGGER_NAME = value;
                    OnPropertyChanged("TRIGGER_NAME");
                }
            }
        }
        private string _TRIGGER_NAME;

    
        /// <summary>
        /// Owner of the table
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLE_OWNER
        {
            get
            {
                return _TABLE_OWNER;
            }
            set
            {
                if (_TABLE_OWNER != value)
                {
                    _TABLE_OWNER = value;
                    OnPropertyChanged("TABLE_OWNER");
                }
            }
        }
        private string _TABLE_OWNER;

    
        /// <summary>
        /// Name of the table on which the trigger is defined
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLE_NAME
        {
            get
            {
                return _TABLE_NAME;
            }
            set
            {
                if (_TABLE_NAME != value)
                {
                    _TABLE_NAME = value;
                    OnPropertyChanged("TABLE_NAME");
                }
            }
        }
        private string _TABLE_NAME;

    
        /// <summary>
        /// Name of the column or the attribute of the ADT column used in trigger definition
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string COLUMN_NAME
        {
            get
            {
                return _COLUMN_NAME;
            }
            set
            {
                if (_COLUMN_NAME != value)
                {
                    _COLUMN_NAME = value;
                    OnPropertyChanged("COLUMN_NAME");
                }
            }
        }
        private string _COLUMN_NAME;

    
        /// <summary>
        /// Is column specified in UPDATE OF clause?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string COLUMN_LIST
        {
            get
            {
                return _COLUMN_LIST;
            }
            set
            {
                if (_COLUMN_LIST != value)
                {
                    _COLUMN_LIST = value;
                    OnPropertyChanged("COLUMN_LIST");
                }
            }
        }
        private string _COLUMN_LIST;

    
        /// <summary>
        /// Usage of column within trigger body
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public virtual string COLUMN_USAGE
        {
            get
            {
                return _COLUMN_USAGE;
            }
            set
            {
                if (_COLUMN_USAGE != value)
                {
                    _COLUMN_USAGE = value;
                    OnPropertyChanged("COLUMN_USAGE");
                }
            }
        }
        private string _COLUMN_USAGE;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_TRIGGER_COLS obj = new DBA_TRIGGER_COLS();
            obj.TRIGGER_OWNER = TRIGGER_OWNER;
            obj.TRIGGER_NAME = TRIGGER_NAME;
            obj.TABLE_OWNER = TABLE_OWNER;
            obj.TABLE_NAME = TABLE_NAME;
            obj.COLUMN_NAME = COLUMN_NAME;
            obj.COLUMN_LIST = COLUMN_LIST;
            obj.COLUMN_USAGE = COLUMN_USAGE;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
