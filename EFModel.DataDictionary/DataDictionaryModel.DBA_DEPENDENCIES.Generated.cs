//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Dependencies to and from objects
    /// </summary>
    public partial class DBA_DEPENDENCIES : ICloneable, INotifyPropertyChanged    {

        public DBA_DEPENDENCIES()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the object
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the object
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                if (_NAME != value)
                {
                    _NAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _NAME;

    
        /// <summary>
        /// Type of the object
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public virtual string TYPE
        {
            get
            {
                return _TYPE;
            }
            set
            {
                if (_TYPE != value)
                {
                    _TYPE = value;
                    OnPropertyChanged("TYPE");
                }
            }
        }
        private string _TYPE;

    
        /// <summary>
        /// Owner of referenced object (remote owner if remote object)
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string REFERENCED_OWNER
        {
            get
            {
                return _REFERENCED_OWNER;
            }
            set
            {
                if (_REFERENCED_OWNER != value)
                {
                    _REFERENCED_OWNER = value;
                    OnPropertyChanged("REFERENCED_OWNER");
                }
            }
        }
        private string _REFERENCED_OWNER;

    
        /// <summary>
        /// Name of referenced object
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public virtual string REFERENCED_NAME
        {
            get
            {
                return _REFERENCED_NAME;
            }
            set
            {
                if (_REFERENCED_NAME != value)
                {
                    _REFERENCED_NAME = value;
                    OnPropertyChanged("REFERENCED_NAME");
                }
            }
        }
        private string _REFERENCED_NAME;

    
        /// <summary>
        /// Type of referenced object
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public virtual string REFERENCED_TYPE
        {
            get
            {
                return _REFERENCED_TYPE;
            }
            set
            {
                if (_REFERENCED_TYPE != value)
                {
                    _REFERENCED_TYPE = value;
                    OnPropertyChanged("REFERENCED_TYPE");
                }
            }
        }
        private string _REFERENCED_TYPE;

    
        /// <summary>
        /// Name of dblink if this is a remote object
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public virtual string REFERENCED_LINK_NAME
        {
            get
            {
                return _REFERENCED_LINK_NAME;
            }
            set
            {
                if (_REFERENCED_LINK_NAME != value)
                {
                    _REFERENCED_LINK_NAME = value;
                    OnPropertyChanged("REFERENCED_LINK_NAME");
                }
            }
        }
        private string _REFERENCED_LINK_NAME;

    
        /// <summary>
        /// There are no comments for DEPENDENCY_TYPE in the schema.
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public virtual string DEPENDENCY_TYPE
        {
            get
            {
                return _DEPENDENCY_TYPE;
            }
            set
            {
                if (_DEPENDENCY_TYPE != value)
                {
                    _DEPENDENCY_TYPE = value;
                    OnPropertyChanged("DEPENDENCY_TYPE");
                }
            }
        }
        private string _DEPENDENCY_TYPE;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_DEPENDENCIES obj = new DBA_DEPENDENCIES();
            obj.OWNER = OWNER;
            obj.NAME = NAME;
            obj.TYPE = TYPE;
            obj.REFERENCED_OWNER = REFERENCED_OWNER;
            obj.REFERENCED_NAME = REFERENCED_NAME;
            obj.REFERENCED_TYPE = REFERENCED_TYPE;
            obj.REFERENCED_LINK_NAME = REFERENCED_LINK_NAME;
            obj.DEPENDENCY_TYPE = DEPENDENCY_TYPE;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
