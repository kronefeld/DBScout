//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description of all object and relational tables in the database
    /// </summary>
    public partial class DBA_ALL_TABLES : ICloneable, INotifyPropertyChanged    {

        public DBA_ALL_TABLES()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the table
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the table
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string TABLE_NAME
        {
            get
            {
                return _TABLE_NAME;
            }
            set
            {
                if (_TABLE_NAME != value)
                {
                    _TABLE_NAME = value;
                    OnPropertyChanged("TABLE_NAME");
                }
            }
        }
        private string _TABLE_NAME;

    
        /// <summary>
        /// Name of the tablespace containing the table
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLESPACE_NAME
        {
            get
            {
                return _TABLESPACE_NAME;
            }
            set
            {
                if (_TABLESPACE_NAME != value)
                {
                    _TABLESPACE_NAME = value;
                    OnPropertyChanged("TABLESPACE_NAME");
                }
            }
        }
        private string _TABLESPACE_NAME;

    
        /// <summary>
        /// Name of the cluster, if any, to which the table belongs
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string CLUSTER_NAME
        {
            get
            {
                return _CLUSTER_NAME;
            }
            set
            {
                if (_CLUSTER_NAME != value)
                {
                    _CLUSTER_NAME = value;
                    OnPropertyChanged("CLUSTER_NAME");
                }
            }
        }
        private string _CLUSTER_NAME;

    
        /// <summary>
        /// Name of the index-only table, if any, to which the overflow or mapping table entry belongs
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string IOT_NAME
        {
            get
            {
                return _IOT_NAME;
            }
            set
            {
                if (_IOT_NAME != value)
                {
                    _IOT_NAME = value;
                    OnPropertyChanged("IOT_NAME");
                }
            }
        }
        private string _IOT_NAME;

    
        /// <summary>
        /// Status of the table will be UNUSABLE if a previous DROP TABLE operation failed,
        /// VALID otherwise
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string STATUS
        {
            get
            {
                return _STATUS;
            }
            set
            {
                if (_STATUS != value)
                {
                    _STATUS = value;
                    OnPropertyChanged("STATUS");
                }
            }
        }
        private string _STATUS;

    
        /// <summary>
        /// Minimum percentage of free space in a block
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_FREE
        {
            get
            {
                return _PCT_FREE;
            }
            set
            {
                if (_PCT_FREE != value)
                {
                    _PCT_FREE = value;
                    OnPropertyChanged("PCT_FREE");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_FREE;

    
        /// <summary>
        /// Minimum percentage of used space in a block
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_USED
        {
            get
            {
                return _PCT_USED;
            }
            set
            {
                if (_PCT_USED != value)
                {
                    _PCT_USED = value;
                    OnPropertyChanged("PCT_USED");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_USED;

    
        /// <summary>
        /// Initial number of transactions
        /// </summary>
        public virtual global::System.Nullable<decimal> INI_TRANS
        {
            get
            {
                return _INI_TRANS;
            }
            set
            {
                if (_INI_TRANS != value)
                {
                    _INI_TRANS = value;
                    OnPropertyChanged("INI_TRANS");
                }
            }
        }
        private global::System.Nullable<decimal> _INI_TRANS;

    
        /// <summary>
        /// Maximum number of transactions
        /// </summary>
        public virtual global::System.Nullable<decimal> MAX_TRANS
        {
            get
            {
                return _MAX_TRANS;
            }
            set
            {
                if (_MAX_TRANS != value)
                {
                    _MAX_TRANS = value;
                    OnPropertyChanged("MAX_TRANS");
                }
            }
        }
        private global::System.Nullable<decimal> _MAX_TRANS;

    
        /// <summary>
        /// Size of the initial extent in bytes
        /// </summary>
        public virtual global::System.Nullable<decimal> INITIAL_EXTENT
        {
            get
            {
                return _INITIAL_EXTENT;
            }
            set
            {
                if (_INITIAL_EXTENT != value)
                {
                    _INITIAL_EXTENT = value;
                    OnPropertyChanged("INITIAL_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _INITIAL_EXTENT;

    
        /// <summary>
        /// Size of secondary extents in bytes
        /// </summary>
        public virtual global::System.Nullable<decimal> NEXT_EXTENT
        {
            get
            {
                return _NEXT_EXTENT;
            }
            set
            {
                if (_NEXT_EXTENT != value)
                {
                    _NEXT_EXTENT = value;
                    OnPropertyChanged("NEXT_EXTENT");
                }
            }
        }
        private global::System.Nullable<decimal> _NEXT_EXTENT;

    
        /// <summary>
        /// Minimum number of extents allowed in the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> MIN_EXTENTS
        {
            get
            {
                return _MIN_EXTENTS;
            }
            set
            {
                if (_MIN_EXTENTS != value)
                {
                    _MIN_EXTENTS = value;
                    OnPropertyChanged("MIN_EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _MIN_EXTENTS;

    
        /// <summary>
        /// Maximum number of extents allowed in the segment
        /// </summary>
        public virtual global::System.Nullable<decimal> MAX_EXTENTS
        {
            get
            {
                return _MAX_EXTENTS;
            }
            set
            {
                if (_MAX_EXTENTS != value)
                {
                    _MAX_EXTENTS = value;
                    OnPropertyChanged("MAX_EXTENTS");
                }
            }
        }
        private global::System.Nullable<decimal> _MAX_EXTENTS;

    
        /// <summary>
        /// Percentage increase in extent size
        /// </summary>
        public virtual global::System.Nullable<decimal> PCT_INCREASE
        {
            get
            {
                return _PCT_INCREASE;
            }
            set
            {
                if (_PCT_INCREASE != value)
                {
                    _PCT_INCREASE = value;
                    OnPropertyChanged("PCT_INCREASE");
                }
            }
        }
        private global::System.Nullable<decimal> _PCT_INCREASE;

    
        /// <summary>
        /// Number of process freelists allocated in this segment
        /// </summary>
        public virtual global::System.Nullable<decimal> FREELISTS
        {
            get
            {
                return _FREELISTS;
            }
            set
            {
                if (_FREELISTS != value)
                {
                    _FREELISTS = value;
                    OnPropertyChanged("FREELISTS");
                }
            }
        }
        private global::System.Nullable<decimal> _FREELISTS;

    
        /// <summary>
        /// Number of freelist groups allocated in this segment
        /// </summary>
        public virtual global::System.Nullable<decimal> FREELIST_GROUPS
        {
            get
            {
                return _FREELIST_GROUPS;
            }
            set
            {
                if (_FREELIST_GROUPS != value)
                {
                    _FREELIST_GROUPS = value;
                    OnPropertyChanged("FREELIST_GROUPS");
                }
            }
        }
        private global::System.Nullable<decimal> _FREELIST_GROUPS;

    
        /// <summary>
        /// Logging attribute
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string LOGGING
        {
            get
            {
                return _LOGGING;
            }
            set
            {
                if (_LOGGING != value)
                {
                    _LOGGING = value;
                    OnPropertyChanged("LOGGING");
                }
            }
        }
        private string _LOGGING;

    
        /// <summary>
        /// Has table been backed up since last modification?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string BACKED_UP
        {
            get
            {
                return _BACKED_UP;
            }
            set
            {
                if (_BACKED_UP != value)
                {
                    _BACKED_UP = value;
                    OnPropertyChanged("BACKED_UP");
                }
            }
        }
        private string _BACKED_UP;

    
        /// <summary>
        /// The number of rows in the table
        /// </summary>
        public virtual global::System.Nullable<decimal> NUM_ROWS
        {
            get
            {
                return _NUM_ROWS;
            }
            set
            {
                if (_NUM_ROWS != value)
                {
                    _NUM_ROWS = value;
                    OnPropertyChanged("NUM_ROWS");
                }
            }
        }
        private global::System.Nullable<decimal> _NUM_ROWS;

    
        /// <summary>
        /// The number of used blocks in the table
        /// </summary>
        public virtual global::System.Nullable<decimal> BLOCKS
        {
            get
            {
                return _BLOCKS;
            }
            set
            {
                if (_BLOCKS != value)
                {
                    _BLOCKS = value;
                    OnPropertyChanged("BLOCKS");
                }
            }
        }
        private global::System.Nullable<decimal> _BLOCKS;

    
        /// <summary>
        /// The number of empty (never used) blocks in the table
        /// </summary>
        public virtual global::System.Nullable<decimal> EMPTY_BLOCKS
        {
            get
            {
                return _EMPTY_BLOCKS;
            }
            set
            {
                if (_EMPTY_BLOCKS != value)
                {
                    _EMPTY_BLOCKS = value;
                    OnPropertyChanged("EMPTY_BLOCKS");
                }
            }
        }
        private global::System.Nullable<decimal> _EMPTY_BLOCKS;

    
        /// <summary>
        /// The average available free space in the table
        /// </summary>
        public virtual global::System.Nullable<decimal> AVG_SPACE
        {
            get
            {
                return _AVG_SPACE;
            }
            set
            {
                if (_AVG_SPACE != value)
                {
                    _AVG_SPACE = value;
                    OnPropertyChanged("AVG_SPACE");
                }
            }
        }
        private global::System.Nullable<decimal> _AVG_SPACE;

    
        /// <summary>
        /// The number of chained rows in the table
        /// </summary>
        public virtual global::System.Nullable<decimal> CHAIN_CNT
        {
            get
            {
                return _CHAIN_CNT;
            }
            set
            {
                if (_CHAIN_CNT != value)
                {
                    _CHAIN_CNT = value;
                    OnPropertyChanged("CHAIN_CNT");
                }
            }
        }
        private global::System.Nullable<decimal> _CHAIN_CNT;

    
        /// <summary>
        /// The average row length, including row overhead
        /// </summary>
        public virtual global::System.Nullable<decimal> AVG_ROW_LEN
        {
            get
            {
                return _AVG_ROW_LEN;
            }
            set
            {
                if (_AVG_ROW_LEN != value)
                {
                    _AVG_ROW_LEN = value;
                    OnPropertyChanged("AVG_ROW_LEN");
                }
            }
        }
        private global::System.Nullable<decimal> _AVG_ROW_LEN;

    
        /// <summary>
        /// The average freespace of all blocks on a freelist
        /// </summary>
        public virtual global::System.Nullable<decimal> AVG_SPACE_FREELIST_BLOCKS
        {
            get
            {
                return _AVG_SPACE_FREELIST_BLOCKS;
            }
            set
            {
                if (_AVG_SPACE_FREELIST_BLOCKS != value)
                {
                    _AVG_SPACE_FREELIST_BLOCKS = value;
                    OnPropertyChanged("AVG_SPACE_FREELIST_BLOCKS");
                }
            }
        }
        private global::System.Nullable<decimal> _AVG_SPACE_FREELIST_BLOCKS;

    
        /// <summary>
        /// The number of blocks on the freelist
        /// </summary>
        public virtual global::System.Nullable<decimal> NUM_FREELIST_BLOCKS
        {
            get
            {
                return _NUM_FREELIST_BLOCKS;
            }
            set
            {
                if (_NUM_FREELIST_BLOCKS != value)
                {
                    _NUM_FREELIST_BLOCKS = value;
                    OnPropertyChanged("NUM_FREELIST_BLOCKS");
                }
            }
        }
        private global::System.Nullable<decimal> _NUM_FREELIST_BLOCKS;

    
        /// <summary>
        /// The number of threads per instance for scanning the table
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public virtual string DEGREE
        {
            get
            {
                return _DEGREE;
            }
            set
            {
                if (_DEGREE != value)
                {
                    _DEGREE = value;
                    OnPropertyChanged("DEGREE");
                }
            }
        }
        private string _DEGREE;

    
        /// <summary>
        /// The number of instances across which the table is to be scanned
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public virtual string INSTANCES
        {
            get
            {
                return _INSTANCES;
            }
            set
            {
                if (_INSTANCES != value)
                {
                    _INSTANCES = value;
                    OnPropertyChanged("INSTANCES");
                }
            }
        }
        private string _INSTANCES;

    
        /// <summary>
        /// Whether the table is to be cached in the buffer cache
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public virtual string CACHE
        {
            get
            {
                return _CACHE;
            }
            set
            {
                if (_CACHE != value)
                {
                    _CACHE = value;
                    OnPropertyChanged("CACHE");
                }
            }
        }
        private string _CACHE;

    
        /// <summary>
        /// Whether table locking is enabled or disabled
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string TABLE_LOCK
        {
            get
            {
                return _TABLE_LOCK;
            }
            set
            {
                if (_TABLE_LOCK != value)
                {
                    _TABLE_LOCK = value;
                    OnPropertyChanged("TABLE_LOCK");
                }
            }
        }
        private string _TABLE_LOCK;

    
        /// <summary>
        /// The sample size used in analyzing this table
        /// </summary>
        public virtual global::System.Nullable<decimal> SAMPLE_SIZE
        {
            get
            {
                return _SAMPLE_SIZE;
            }
            set
            {
                if (_SAMPLE_SIZE != value)
                {
                    _SAMPLE_SIZE = value;
                    OnPropertyChanged("SAMPLE_SIZE");
                }
            }
        }
        private global::System.Nullable<decimal> _SAMPLE_SIZE;

    
        /// <summary>
        /// The date of the most recent time this table was analyzed
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> LAST_ANALYZED
        {
            get
            {
                return _LAST_ANALYZED;
            }
            set
            {
                if (_LAST_ANALYZED != value)
                {
                    _LAST_ANALYZED = value;
                    OnPropertyChanged("LAST_ANALYZED");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _LAST_ANALYZED;

    
        /// <summary>
        /// Is this table partitioned? YES or NO
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string PARTITIONED
        {
            get
            {
                return _PARTITIONED;
            }
            set
            {
                if (_PARTITIONED != value)
                {
                    _PARTITIONED = value;
                    OnPropertyChanged("PARTITIONED");
                }
            }
        }
        private string _PARTITIONED;

    
        /// <summary>
        /// If index-only table, then IOT_TYPE is IOT or IOT_OVERFLOW or IOT_MAPPING else NULL
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public virtual string IOT_TYPE
        {
            get
            {
                return _IOT_TYPE;
            }
            set
            {
                if (_IOT_TYPE != value)
                {
                    _IOT_TYPE = value;
                    OnPropertyChanged("IOT_TYPE");
                }
            }
        }
        private string _IOT_TYPE;

    
        /// <summary>
        /// If user-defined OID, then USER-DEFINED, else if system generated OID, then SYST
        /// EM GENERATED
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public virtual string OBJECT_ID_TYPE
        {
            get
            {
                return _OBJECT_ID_TYPE;
            }
            set
            {
                if (_OBJECT_ID_TYPE != value)
                {
                    _OBJECT_ID_TYPE = value;
                    OnPropertyChanged("OBJECT_ID_TYPE");
                }
            }
        }
        private string _OBJECT_ID_TYPE;

    
        /// <summary>
        /// Owner of the type of the table if the table is an object table
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLE_TYPE_OWNER
        {
            get
            {
                return _TABLE_TYPE_OWNER;
            }
            set
            {
                if (_TABLE_TYPE_OWNER != value)
                {
                    _TABLE_TYPE_OWNER = value;
                    OnPropertyChanged("TABLE_TYPE_OWNER");
                }
            }
        }
        private string _TABLE_TYPE_OWNER;

    
        /// <summary>
        /// Type of the table if the table is an object table
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string TABLE_TYPE
        {
            get
            {
                return _TABLE_TYPE;
            }
            set
            {
                if (_TABLE_TYPE != value)
                {
                    _TABLE_TYPE = value;
                    OnPropertyChanged("TABLE_TYPE");
                }
            }
        }
        private string _TABLE_TYPE;

    
        /// <summary>
        /// Can the current session only see data that it place in this object itself?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string TEMPORARY
        {
            get
            {
                return _TEMPORARY;
            }
            set
            {
                if (_TEMPORARY != value)
                {
                    _TEMPORARY = value;
                    OnPropertyChanged("TEMPORARY");
                }
            }
        }
        private string _TEMPORARY;

    
        /// <summary>
        /// Is this table object created as part of icreate for domain indexes?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public virtual string SECONDARY
        {
            get
            {
                return _SECONDARY;
            }
            set
            {
                if (_SECONDARY != value)
                {
                    _SECONDARY = value;
                    OnPropertyChanged("SECONDARY");
                }
            }
        }
        private string _SECONDARY;

    
        /// <summary>
        /// Is the table a nested table?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string NESTED
        {
            get
            {
                return _NESTED;
            }
            set
            {
                if (_NESTED != value)
                {
                    _NESTED = value;
                    OnPropertyChanged("NESTED");
                }
            }
        }
        private string _NESTED;

    
        /// <summary>
        /// The default buffer pool to be used for table blocks
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public virtual string BUFFER_POOL
        {
            get
            {
                return _BUFFER_POOL;
            }
            set
            {
                if (_BUFFER_POOL != value)
                {
                    _BUFFER_POOL = value;
                    OnPropertyChanged("BUFFER_POOL");
                }
            }
        }
        private string _BUFFER_POOL;

    
        /// <summary>
        /// Whether partitioned row movement is enabled or disabled
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string ROW_MOVEMENT
        {
            get
            {
                return _ROW_MOVEMENT;
            }
            set
            {
                if (_ROW_MOVEMENT != value)
                {
                    _ROW_MOVEMENT = value;
                    OnPropertyChanged("ROW_MOVEMENT");
                }
            }
        }
        private string _ROW_MOVEMENT;

    
        /// <summary>
        /// Are the statistics calculated without merging underlying partitions?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string GLOBAL_STATS
        {
            get
            {
                return _GLOBAL_STATS;
            }
            set
            {
                if (_GLOBAL_STATS != value)
                {
                    _GLOBAL_STATS = value;
                    OnPropertyChanged("GLOBAL_STATS");
                }
            }
        }
        private string _GLOBAL_STATS;

    
        /// <summary>
        /// Were the statistics entered directly by the user?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string USER_STATS
        {
            get
            {
                return _USER_STATS;
            }
            set
            {
                if (_USER_STATS != value)
                {
                    _USER_STATS = value;
                    OnPropertyChanged("USER_STATS");
                }
            }
        }
        private string _USER_STATS;

    
        /// <summary>
        /// If temporary table, then duration is sys$session or sys$transaction else NULL
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public virtual string DURATION
        {
            get
            {
                return _DURATION;
            }
            set
            {
                if (_DURATION != value)
                {
                    _DURATION = value;
                    OnPropertyChanged("DURATION");
                }
            }
        }
        private string _DURATION;

    
        /// <summary>
        /// Whether skip corrupt blocks is enabled or disabled
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string SKIP_CORRUPT
        {
            get
            {
                return _SKIP_CORRUPT;
            }
            set
            {
                if (_SKIP_CORRUPT != value)
                {
                    _SKIP_CORRUPT = value;
                    OnPropertyChanged("SKIP_CORRUPT");
                }
            }
        }
        private string _SKIP_CORRUPT;

    
        /// <summary>
        /// Should we keep track of the amount of modification?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string MONITORING
        {
            get
            {
                return _MONITORING;
            }
            set
            {
                if (_MONITORING != value)
                {
                    _MONITORING = value;
                    OnPropertyChanged("MONITORING");
                }
            }
        }
        private string _MONITORING;

    
        /// <summary>
        /// Owner of the cluster, if any, to which the table belongs
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string CLUSTER_OWNER
        {
            get
            {
                return _CLUSTER_OWNER;
            }
            set
            {
                if (_CLUSTER_OWNER != value)
                {
                    _CLUSTER_OWNER = value;
                    OnPropertyChanged("CLUSTER_OWNER");
                }
            }
        }
        private string _CLUSTER_OWNER;

    
        /// <summary>
        /// Should we keep track of row level dependencies?
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string DEPENDENCIES
        {
            get
            {
                return _DEPENDENCIES;
            }
            set
            {
                if (_DEPENDENCIES != value)
                {
                    _DEPENDENCIES = value;
                    OnPropertyChanged("DEPENDENCIES");
                }
            }
        }
        private string _DEPENDENCIES;

    
        /// <summary>
        /// Whether table compression is enabled or not
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public virtual string COMPRESSION
        {
            get
            {
                return _COMPRESSION;
            }
            set
            {
                if (_COMPRESSION != value)
                {
                    _COMPRESSION = value;
                    OnPropertyChanged("COMPRESSION");
                }
            }
        }
        private string _COMPRESSION;

    
        /// <summary>
        /// Whether table is dropped and is in Recycle Bin
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public virtual string DROPPED
        {
            get
            {
                return _DROPPED;
            }
            set
            {
                if (_DROPPED != value)
                {
                    _DROPPED = value;
                    OnPropertyChanged("DROPPED");
                }
            }
        }
        private string _DROPPED;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_ALL_TABLES obj = new DBA_ALL_TABLES();
            obj.OWNER = OWNER;
            obj.TABLE_NAME = TABLE_NAME;
            obj.TABLESPACE_NAME = TABLESPACE_NAME;
            obj.CLUSTER_NAME = CLUSTER_NAME;
            obj.IOT_NAME = IOT_NAME;
            obj.STATUS = STATUS;
            obj.PCT_FREE = PCT_FREE;
            obj.PCT_USED = PCT_USED;
            obj.INI_TRANS = INI_TRANS;
            obj.MAX_TRANS = MAX_TRANS;
            obj.INITIAL_EXTENT = INITIAL_EXTENT;
            obj.NEXT_EXTENT = NEXT_EXTENT;
            obj.MIN_EXTENTS = MIN_EXTENTS;
            obj.MAX_EXTENTS = MAX_EXTENTS;
            obj.PCT_INCREASE = PCT_INCREASE;
            obj.FREELISTS = FREELISTS;
            obj.FREELIST_GROUPS = FREELIST_GROUPS;
            obj.LOGGING = LOGGING;
            obj.BACKED_UP = BACKED_UP;
            obj.NUM_ROWS = NUM_ROWS;
            obj.BLOCKS = BLOCKS;
            obj.EMPTY_BLOCKS = EMPTY_BLOCKS;
            obj.AVG_SPACE = AVG_SPACE;
            obj.CHAIN_CNT = CHAIN_CNT;
            obj.AVG_ROW_LEN = AVG_ROW_LEN;
            obj.AVG_SPACE_FREELIST_BLOCKS = AVG_SPACE_FREELIST_BLOCKS;
            obj.NUM_FREELIST_BLOCKS = NUM_FREELIST_BLOCKS;
            obj.DEGREE = DEGREE;
            obj.INSTANCES = INSTANCES;
            obj.CACHE = CACHE;
            obj.TABLE_LOCK = TABLE_LOCK;
            obj.SAMPLE_SIZE = SAMPLE_SIZE;
            obj.LAST_ANALYZED = LAST_ANALYZED;
            obj.PARTITIONED = PARTITIONED;
            obj.IOT_TYPE = IOT_TYPE;
            obj.OBJECT_ID_TYPE = OBJECT_ID_TYPE;
            obj.TABLE_TYPE_OWNER = TABLE_TYPE_OWNER;
            obj.TABLE_TYPE = TABLE_TYPE;
            obj.TEMPORARY = TEMPORARY;
            obj.SECONDARY = SECONDARY;
            obj.NESTED = NESTED;
            obj.BUFFER_POOL = BUFFER_POOL;
            obj.ROW_MOVEMENT = ROW_MOVEMENT;
            obj.GLOBAL_STATS = GLOBAL_STATS;
            obj.USER_STATS = USER_STATS;
            obj.DURATION = DURATION;
            obj.SKIP_CORRUPT = SKIP_CORRUPT;
            obj.MONITORING = MONITORING;
            obj.CLUSTER_OWNER = CLUSTER_OWNER;
            obj.DEPENDENCIES = DEPENDENCIES;
            obj.COMPRESSION = COMPRESSION;
            obj.DROPPED = DROPPED;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
