//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 07.07.2015 09:05:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace EFModel.DataDictionary
{

    /// <summary>
    /// Description of all views in the database
    /// </summary>
    public partial class DBA_VIEWS : ICloneable, INotifyPropertyChanged    {

        public DBA_VIEWS()
        {
        }

        #region Properties
    
        /// <summary>
        /// Owner of the view
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string OWNER
        {
            get
            {
                return _OWNER;
            }
            set
            {
                if (_OWNER != value)
                {
                    _OWNER = value;
                    OnPropertyChanged("OWNER");
                }
            }
        }
        private string _OWNER;

    
        /// <summary>
        /// Name of the view
        /// </summary>
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string VIEW_NAME
        {
            get
            {
                return _VIEW_NAME;
            }
            set
            {
                if (_VIEW_NAME != value)
                {
                    _VIEW_NAME = value;
                    OnPropertyChanged("VIEW_NAME");
                }
            }
        }
        private string _VIEW_NAME;

    
        /// <summary>
        /// Length of the view text
        /// </summary>
        public virtual global::System.Nullable<decimal> TEXT_LENGTH
        {
            get
            {
                return _TEXT_LENGTH;
            }
            set
            {
                if (_TEXT_LENGTH != value)
                {
                    _TEXT_LENGTH = value;
                    OnPropertyChanged("TEXT_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _TEXT_LENGTH;

    
        /// <summary>
        /// View text
        /// </summary>
        public virtual string TEXT
        {
            get
            {
                return _TEXT;
            }
            set
            {
                if (_TEXT != value)
                {
                    _TEXT = value;
                    OnPropertyChanged("TEXT");
                }
            }
        }
        private string _TEXT;

    
        /// <summary>
        /// Length of the type clause of the object view
        /// </summary>
        public virtual global::System.Nullable<decimal> TYPE_TEXT_LENGTH
        {
            get
            {
                return _TYPE_TEXT_LENGTH;
            }
            set
            {
                if (_TYPE_TEXT_LENGTH != value)
                {
                    _TYPE_TEXT_LENGTH = value;
                    OnPropertyChanged("TYPE_TEXT_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _TYPE_TEXT_LENGTH;

    
        /// <summary>
        /// Type clause of the object view
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public virtual string TYPE_TEXT
        {
            get
            {
                return _TYPE_TEXT;
            }
            set
            {
                if (_TYPE_TEXT != value)
                {
                    _TYPE_TEXT = value;
                    OnPropertyChanged("TYPE_TEXT");
                }
            }
        }
        private string _TYPE_TEXT;

    
        /// <summary>
        /// Length of the WITH OBJECT OID clause of the object view
        /// </summary>
        public virtual global::System.Nullable<decimal> OID_TEXT_LENGTH
        {
            get
            {
                return _OID_TEXT_LENGTH;
            }
            set
            {
                if (_OID_TEXT_LENGTH != value)
                {
                    _OID_TEXT_LENGTH = value;
                    OnPropertyChanged("OID_TEXT_LENGTH");
                }
            }
        }
        private global::System.Nullable<decimal> _OID_TEXT_LENGTH;

    
        /// <summary>
        /// WITH OBJECT OID clause of the object view
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public virtual string OID_TEXT
        {
            get
            {
                return _OID_TEXT;
            }
            set
            {
                if (_OID_TEXT != value)
                {
                    _OID_TEXT = value;
                    OnPropertyChanged("OID_TEXT");
                }
            }
        }
        private string _OID_TEXT;

    
        /// <summary>
        /// Owner of the type of the view if the view is an object view
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string VIEW_TYPE_OWNER
        {
            get
            {
                return _VIEW_TYPE_OWNER;
            }
            set
            {
                if (_VIEW_TYPE_OWNER != value)
                {
                    _VIEW_TYPE_OWNER = value;
                    OnPropertyChanged("VIEW_TYPE_OWNER");
                }
            }
        }
        private string _VIEW_TYPE_OWNER;

    
        /// <summary>
        /// Type of the view if the view is an object view
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string VIEW_TYPE
        {
            get
            {
                return _VIEW_TYPE;
            }
            set
            {
                if (_VIEW_TYPE != value)
                {
                    _VIEW_TYPE = value;
                    OnPropertyChanged("VIEW_TYPE");
                }
            }
        }
        private string _VIEW_TYPE;

    
        /// <summary>
        /// Name of the superview, if view is a subview
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public virtual string SUPERVIEW_NAME
        {
            get
            {
                return _SUPERVIEW_NAME;
            }
            set
            {
                if (_SUPERVIEW_NAME != value)
                {
                    _SUPERVIEW_NAME = value;
                    OnPropertyChanged("SUPERVIEW_NAME");
                }
            }
        }
        private string _SUPERVIEW_NAME;


        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DBA_VIEWS obj = new DBA_VIEWS();
            obj.OWNER = OWNER;
            obj.VIEW_NAME = VIEW_NAME;
            obj.TEXT_LENGTH = TEXT_LENGTH;
            obj.TEXT = TEXT;
            obj.TYPE_TEXT_LENGTH = TYPE_TEXT_LENGTH;
            obj.TYPE_TEXT = TYPE_TEXT;
            obj.OID_TEXT_LENGTH = OID_TEXT_LENGTH;
            obj.OID_TEXT = OID_TEXT;
            obj.VIEW_TYPE_OWNER = VIEW_TYPE_OWNER;
            obj.VIEW_TYPE = VIEW_TYPE;
            obj.SUPERVIEW_NAME = SUPERVIEW_NAME;
            return obj;
        }

        #endregion
    
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
